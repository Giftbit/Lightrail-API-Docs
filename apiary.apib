FORMAT: 1A
HOST: https://currencyapi-test.giftbit.com/v1/

# Giftbit Currency API

Building into Giftbit's RESTful Currency API gives you a complete and powerful e-commerce value solution for your business to easily power gift cards, promotions, credits, points programs and more.

Contact Giftbit anytime at currencyapi@giftbit.com for technical, usecase, or general assistance - we are here to help you build the right solution.

## Reporting Errors or Suggestions

This interactive documentation will provide full code samples in many popular languages and let you try out all functionality.

The API Blueprint file that produces this documentation is in GitHub at https://github.com/Giftbit/currencyapi.  If you find a mistake or have a suggestion for improvement, please submit it directly via pull request.

## API Base URL

The base URL for Giftbit's environment is:
<ul style="list-style-type:circle">
  <li><em>https://currencyapi.giftbit.com/v1/</em></li>
</ul>

## Account creation and authorization

You'll need either your test or production `access_token` from your Giftbit merchant account details page to use the API.

If you don't already have a merchant account you can <em><a href="http://info.giftbit.com/cf/currency_invite" target="_blank">sign up here</a></em>. Once you've signed up, contact Giftbit to get test credentials.

Be sure to store your production API token extremely securely in your production configurations.

You authenticate with your `access_token` by including your token prefixed by the word ‘Bearer’ (case sensitive) and a space in the “Authorization” HTTP header, as per the examples in this
documentation.

## Understanding the API: the relationship between Cards, Codes, and Categories

The API is structured around two main endpoints and their corresponding concepts: Cards and Codes. A Card represents a unique gift card, promotional code, credit, or other type of value that your business wishes to issue. A Card is the thing that your internal team will interact with following your implementation (creation, retrieval, listing, statistics, etc).

A Category is an identifier that can be attached in a many-to-many relationship with Cards. A Category consists of a key-value pair of strings; for example, one category might be {"campaign": "first campaign"}. All of the statistics that Giftbit tracks are grouped by Category, so setting good Categories on your Cards will ensure you get the stats you are looking for. For example, if you want to compare statistics across campaigns, you can set a {"campaign": "first campaign"} Category on one group of Cards, and a {"campaign": "second campaign"} on another. Each would have their own set of statistics calculated for them.

A Code is the unique financial device associated with a Card. A Code has a 'fullcode' that is a unique, unguessable alpha-numeric code that is distributed to a recipient. A Code has a balance, a currency type, an optional expiry and all the Transactions (uses) associated with that code. Your consumer-facing functionality (checkout, balance check, transaction history for a code) interacts with the /Code endpoint.

There is a 1-1 relationship between a Card and a Code. You specify the details of the Code when you create the Card. Giftbit plans to add extensive functionality to Card including automated delivery mechanisms, templating, external integrations, and more - hence the separation from Code.

## Common use cases

### Creating and accepting codes in your your checkout
A common use case for this API is one in which Giftbit powers your gift cards. First, you would create a Card with an attached Code, which contains the value which you wish to send as well as the date you would like the code to expire (if applicable). You would then deliver the fullcode associated with this Code to your recipient, and allow the recipient to redeem value against this Code in one or more transactions. You can also allow the user to see the usage history or balance remaining on their Code at any time.

The steps and API calls you would take in this use case are: 

- If you want to create Cards on demand via the API:
    - Create one or more new Card(s) with associated Code(s) (POST /cards). Make sure you keep the returned cardId(s).
    - Retrieve the fullcode for each code using the cardId to deliver to your recipient (GET /cards/{cardId}/code/fullcode).
- If you want to create many Cards at once via the web portal:
    - Create an order of Cards with associated Codes through the web portal.
    - Receive an email with a CSV of fullcodes for these Cards.
- Accept the fullcode in your checkout, and create a Transaction on the Code (POST /codes/{fullcode}/transactions).
- Check the remaining value associated with the fullcode and display to your recipient (GET /codes/{fullcode}/balance).

#### High level architecture diagram

![High level architecture](http://resources.giftbit.com/api/embeddedimages/Currency.API.high.level.architecture.png)

### Building a points accumulation program for your users
Another common use case for this API is to power a points/rewards accumulation system for your user/application ecosystem.  In this example, you are not distributing or making use of Codes at all, but rather using the Cards endpoint exclusively to maintain points for your users.

The steps and API calls you would take in this use case are: 
- Create a new Card (POST /cards). Make sure you keep the returned cardId and associate it with a particular user in your system.
- Every time you wish to adjust the user's points, create an appropriate transaction (POST cards/{cardId}/code/transactions).
- Check the remaining value associated with the fullcode and display to your recipient (GET /cards/{cardId}/code/balance).

Note that in this example, you do everything through the cardId and do not need to use the Code endpoint.

 If this usecase fits your need, a great way to reward your users for appropriate points milestones is to send them gift cards to top brands through Giftbit's catalog API.  https://www.giftbit.com/platform/

## Coding for idempotency and the userSuppliedId

The API is fully idempotent on the 'userSuppliedId' field, which is a required parameter for all endpoint operations that result in a change of state on the Giftbit side (POST, PUT, DELETE).  Therefore, in the case of a non-received response from the API or other unknown condition, it is safe and recommended to retry the request with the same userSuppliedId.

For example, your customer is using a Code in your checkout.  You POST to the /codes/{fullcode}/transactions endpoint to mark the use, but get a network timeout and are unable to process the response. As a result, your system doesn't know if Giftbit successfully received your POST and recorded the transaction.  With idempotency, you do not need any lookups or other complicated error handling to see if the original API call succeeded. You can simply retry the same call (as many times as needed) with the same userSuppliedId, and get the same 200 response upon success whether or not a previous request went through. Our server will do the operation once and only once for that userSuppliedId.

Given the above, it is important you think about how to structure your userSuppliedIds and error handling so that you are always sending a unique value for different logical requests, but the same one for any retries.  

Attempting to reuse a userSuppliedId but providing different request parameters will result in a 409 error.

Note that userSuppliedIds are considered per endpoint and do not need to be unique across different endpoints.

## Reserved Categories: understanding giftbit_order and giftbit_type

Giftbit currently has two reserved Category keys: "giftbit_order" and "giftbit_type". A "giftbit_order" is the default grouping of Cards, and is assigned either through the web portal or the /cards endpoint; in this document, an order refers to a group of Cards that are attached to the same {"giftbit-order": "order name"} Category. 

Like any Category, stats are tracked by order - so descriptive order names applied to the right Cards will help you get the stats you are looking for. To group cards in the same order, you can supply the same value for {"giftbit_order": "your order name here"} Category when creating Cards through the /cards endpoint via the API, or you can order many cards at once through the web portal. If a "giftbit_order" Category is not provided on Card creation, the Cards will be assigned a default {"giftbit_order": "YYYY-MM-DD"} Category corresponding to the date they were created.

A "giftbit_type" refers to the Card's purpose, and corresponds to the types that can be assigned through the web portal. There are four allowed values for the "giftbit_type" key: PROMO, GIFT_CARD, REFUND, and UNCATEGORIZED. If a "giftbit_type" is not provided on Card creation, the Cards will be assigned the UNCATEGORIZED value. 

## Handling error responses

Clients should always check the HTTP status code of the response and act accordingly if the response is not a 200.

Error response JSON will be in the following format:

        
        {
            status: (number) - will match the HTTP response code.    
            message: (string, optional) - a descriptive error message if one is available
            code: (string, optional) - a code that can be provided to Giftbit support if troubleshooting help is needed
        }

Example error responses:
### 400 (bad request)
        {
            "status": 400,
            "message": "Failed to create card due to error during code creation. Response from code creation: Bad Request. Missing Required Parameter 'initialValue'."
        }

### 401 (unauthorized)
        {
            "status": 401,
            "message": "Unauthorized",
            "code": "CREDENTIALS_INVALID"
        }
        
### 409 (idempotency failure)
        {
            "status": 409,
            "message": "A different transaction with the same userSuppliedId already exists."
        }


## A note on security and fullcodes

A fullcode is the property of a Code object that represents real value in your checkout. We have some recommended best practices around creating and accessing them:
 - Only retrieve the fullcode as returned by /cards/{cardId}/code/fullcode endpoint when you absolutely need it, such as when you will distribute it to your recipient.  No other API calls will return the fullcode.
 - There is no need to ever store fullcodes in your system and we strongly recommend against doing so.  You should store the corresponding cardId upon creation for future reference and API calls.  All functionality only requires you to pass the fullcode through your system in a transient manner.

Note that Giftbit is a PCI compliant platform and we use all modern best practices around cryptography and access control to keep your codes safe.

## About dates
The API expects all dates in request parameters to conform to the ISO-8601 format, specifically "yyyy-MM-dd'T'HH:mm:ss.SSSZ".  You can see examples in this documentation.
This allows you to control things such as Code expiry in fine granularity to the timezone of your choosing.   All responses will always be given in this same format converted to the UTC timezone (+0000)

## About currency value, currency type, and no-currency use (such as points)
Where currency type (eg. USD, CDN, AUD) is required or returned, the API expects/uses 3 character uppercase codes conforming to the ISO-4217 standard. Giftbit does not do any currency conversion nor does currency influence internal behaviour; rather, currency allows you to issue and track cards in different currencies as you choose.

In all cases where value is concerned, you need to provide the amount in the smallest currency unit. For most, this is the amount in cents (or pence, penny, or similarly named unit). For example, to create a Card for USD1.00, you would set the initialValue=100 (100 cents).

For zero-decimal currencies, or use with non-currency applications such as points, use the regular whole denomination. For example, for ¥1, you should set initialValue=1 (1 JPY), since ¥1 is the smallest currency unit.

### Using the API for points programs or similar non-currency applications.

If you wish to represent non-currency amounts in cards, use value of 'XXX' when currency is required.  'XXX' is used in ISO-4217 to denote a transaction involving non-currency and our API supports this concept.

## Legal responsibilities
The Giftbit Currency API provides flexibility to implement multiple currency solutions (gift cards, unique promo codes, credit refunds, etc). It is the responsibility of the API user and their organization to understand and follow the jurisdictions and laws that govern all aspects of their implementation.

## Ping and health check [/ping]
Use the /ping endpoint to check that your authorization is working correctly or to healthcheck the API. 


### Ping [GET]
+ Request (application/json)
    + Headers

            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200
    + Attributes
        + username (string) - The email address associated with the credentials provided.
        + servertime (string) - The current time on the server (ISO 8601 format)

    + Body
    
            {
                "username":"example_merchant_account@yourdomain.com",
                "servertime": "2016-09-08T18:44:02.124+0000"
            }
        
+ Response 401

        {
            "status": 401,
            "message": "Unauthorized",
            "code": "CREDENTIALS_INVALID"
        }

## Cards [/cards/]
The /cards endpoint is for use by your internal team to create and manage your Cards and Codes.
Cards represent a gift card, promotional offer, credit, or other means of eCommerce currency relevant to your business.  Every Card is created with a corresponding Code automatically.  You access details on both your Cards and your Codes through the cardId, which eliminates the need to ever store a fullcode.

### Create a Card and its Code [POST]

Create a Card and its corresponding Code.  Note that cardId on response should be persisted to lookup or interact with the Code.  The Code is not returned as part of the response.  If you provide an expiry, please ensure you have confirmed the legality of expiring value for your implementation.

You can also provide a "giftbit_order" Category, which will assign the Card to whichever order you specify. If no "giftbit_order" is provided, the Card will be assigned to a default {"giftbit_order": "YYYY-MM-DD"} Category indicating the date the Card was created. Categories are not returned as part of the response.

+ Request (application/json)
The categories object is optional. If provided, it will attach the given Category objects to the Card, creating any that do not exist already.

    + Headers

            Authorization: Bearer <YOUR_ACCESS_TOKEN>
    + Attributes
        + userSuppliedId (string) - The unique identifier you provided when this Card was created. 
        + Code
            + initialValue (number) - the starting value of the code, in the smallest currency unit (such as cents).
            + currency (string) - The 3 character ISO-4217 currency.
            + expires (string) - The code's optional expiry date and time.  ISO-8601 format.
        + Categories
            + categoryKey (string) - The key of the category. Examples: "giftbit_type", "giftbit_order", "city"
            + categoryValue (string) - The value of the category. Examples: "PROMO", "My Order", "Victoria"

    + Body
    
            {
                "userSuppliedId": "12345678",
                "code":
                {
                    "initialValue":5000,
                    "currency":"CAD",
                    "expires":"2017-03-03T08:00:00.000+0000"
                }
                "categories":
                {
                    "giftbit_type": "PROMO",
                    "giftbit_order": "My Order",
                    "My Custom Category Key": "My Custom Category Value"
                }
            }
        
+ Response 200
    + Attributes
        + Card
            + userSuppliedId (string) - The unique identifier you provided when this Card was created. 
            + cardId (string) - Giftbit's unique identifier for this Card.  Be sure to persist this value for future operations.
            + dateCreated (string) - The Giftbit system time of the creation in ISO-8601 format.

    + Body
    
            {
                "cardId":"card-5c1c1760-b185-4861-a4fc-47eca84bf52b",
                "userSuppliedId":"12345678",
                "dateCreated":"2016-08-10T08:00:00.000+0000"
            }
    

### List Cards [GET /cards/{?limit}{?offset}{?categoryKey}{?categoryValue}]

Retrieve your created Cards.  Results are returned in descending order of creation (newest first).
+ Request (application/json)
    + Headers
    
             Authorization: Bearer <YOUR_ACCESS_TOKEN>
   
+ Parameter
    + limit (number, optional) - For pagination.  The maximum number of results to return at once. Default 100.
    + offset (number, optional) - For pagination. The offset of the first results in the total results. Default 0.
    + categoryKey (string, optional) - A key to a Category. Will return all Cards attached to Categories with this key if supplied.
    + categoryValue (string, optional) - A value of a Category. Will return all Cards attached to Categories with this value if supplied. If both a categoryKey and a categoryValue are supplied, will return all Cards associated with the unique Category having that categoryKey and categoryValue. 

+ Response 200

    + Body
    
            {
                "cards":[
                    {
                    "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "dateCreated": "2016-09-01T23:47:02.000+0000",
                    "userSuppliedId":"1234"
                    },
                    {
                    "cardId": "card-4e61aba2-5d5a-4e99-8574-6479cecce0dd",
                    "dateCreated": "2016-09-01T23:42:35.000+0000",
                    "userSuppliedId":"1235"
                    },
                    {
                    "cardId": "card-3c83dc55-63e1-4148-8ed7-501bcf2aff5d",
                    "dateCreated": "2016-09-01T23:42:23.000+0000",
                    "userSuppliedId":"1236"
                    },
                    {
                    "cardId": "card-c8dc87a7-7739-403f-8aa7-6c995d7a1d29",
                    "dateCreated": "2016-09-01T23:42:17.000+0000",
                    "userSuppliedId":"1237"
                    },
                    {
                    "cardId": "card-56d23f04-64a8-452b-b3a1-3e758ebb6adc",
                    "dateCreated": "2016-09-01T23:41:32.000+0000",
                    "userSuppliedId":"1238"
                    }
                ],
                "pagination":{
                    "count": 5,
                    "limit": 100,
                    "maxLimit": 1000,
                    "offset": 0,
                    "totalCount": 5
                }
            }
    
### Retrieve Card by cardId [GET /cards/{cardId}]

Look up a single Card by by the Giftbit assigned cardId.
            
+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200

    + Body
        
            {
                "card":{
                    "userSuppliedId" : "1234",
                    "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "dateCreated": "2016-09-01T23:47:02.000+0000"
                }
            }
            
### Retrieve Card by userSuppliedId [GET /cards{?userSuppliedId}]

Look up a single Card by the userSuppliedId.
            
+ Parameters 
    + userSuppliedId (string) - The identifier that you supplied when you created the Card.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200

    + Body
        
            {
                "cards":[
                    {
                        "userSuppliedId" : "1234",
                        "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                        "dateCreated": "2016-09-01T23:47:02.000+0000"
                    }
                ]
            }
    

### Retrieve Categories by cardId [GET /cards/{cardId}/categories]

After creating a Card, use this endpoint to retrieve all Categories associated with that Card.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
        
+ Response 200
    + Body
    
            {
                "categories":[
                    {
                        "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                        "key": "someCategoryKey",
                        "value": "someCategoryValue"
                    }, 
                    {
                        "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                        "key": "giftbit_order",
                        "value": "my order name"
                    },
                    {
                        "categoryId": "category-abe0bf1085fc49f88fc1545a00102800",
                        "key": "giftbit_type",
                        "value": "PROMO"
                    }
                ]
            }
            
### Retrieve a fullcode by cardId [GET /cards/{cardId}/code/fullcode]

After creating a Card, use this endpoint to retrieve the fullcode to give to your recipient.  This is the code worth value to your organization; do not store this code in your database or other parts of your system.  If you are tracking recipients, associate your recipient with the cardId.

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200

    + Body
    
            {
                "fullcode":{
                    "code" : "GFBT-ABCDE-FGHIJK-LMNOP-12345"
                }
            }

### Retrieve a Code by cardId [GET /cards/{cardId}/code]

Use this endpoint if your system or internal staff need to retrieve basic information about a Code. 

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Response 200
    
    + Body
    
            {
                "code":{
                    "currency": "CAD",
                    "initialValue": 5000,
                    "codeLastFour": "WXYZ",
                    "dateCreated": "2016-08-10T08:00:00.000+0000",
                    "expires": "2017-03-03T08:00:00.000+0000"
                }
            }

### Retrieve a Code balance by cardId [GET /cards/{cardId}/code/balance]

Use this endpoint if your system or internal staff need to retrieve up-to-date balance information about a Code.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Response 200

    + Body
    
            {
                "balance":{
                    "currentValue": 200
                }
            }

### Retrieve Transactions for a Code by cardId [GET /cards/{cardId}/code/transactions/]

Use this endpoint if your system or internal staff need to retrieve all the Transactions for a Code.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Response 200
    
    + Body
        
            {
                "transactions":[
                    {
                        "transactionId": "transaction-86251f7b040b45d3b7364bae04c74870",
                        "value": 500,
                        "valueAvailableAfterTransaction": 500,
                        "userSuppliedId": "someTransaction",
                        "dateCreated": "2016-08-10T09:00:00.000+0000"
                    }
                ],
                "pagination":{
                    "count": 1,
                    "limit": 100,
                    "maxLimit": 1000,
                    "offset": 0,
                    "totalCount": 1
                }
            }
    
### Retrieve a single Transaction for a code by cardId and transactionId [GET /cards/{cardId}/code/transactions/{transactionId}]

Use this endpoint if your system or internal staff need to retrieve all the Transactions for a Code.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    + transactionId (string) - The identifier returned when the Transaction was created.
    
+ Response 200
    
    + Body
            
            {
                "transaction" {
                    "transactionId": "transaction-86251f7b040b45d3b7364bae04c74870",
                    "value": 500,
                    "valueAvailableAfterTransaction": 500,
                    "userSuppliedId": "someTransaction",
                    "dateCreated": "2016-08-10T09:00:00.000+0000"
                }
            }
    
### Create a Transaction for a Code given the cardId [POST /cards/{cardId}/code/transactions]

Use this endpoint if your system or internal staff need to create a Transaction for a Code, such as to mark all or part of it as used.

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

    + Attributes
        + value (number, required) - The amount to use from the Code in the smallest currency unit (such as cents).  Must be a postive number.  If the amount exceeds the current value of the code, an error will result.
        + currency  (string, required) - The 3 character ISO-4217 currency code.  The supplied currency must match the currency of code when it was created or an error will result.
        + userSuppliedId (string, required) - A unique identifier for this transaction.
        
    + Body
    
            {
            "value": "500",
            "currency": "CAD",
            "userSuppliedId": "someTransaction"
            }
        
+ Response 200

    + Body
    
            {
                "transaction" {
                    "transactionId": "transaction-86251f7b040b45d3b7364bae04c74870",
                    "value": 500,
                    "valueAvailableAfterTransaction": 500,
                    "userSuppliedId": "someTransaction",
                    "dateCreated": "2016-08-10T09:00:00.000+0000"
                }
            }
    

## Categories [/categories/]

A Category represents a grouping of Cards e.g. orders, types of cards, or any custom Category you wish to create. Most functions of Categories are closely tied to Cards.

### List your existing Categories [GET /categories/{?categoryKey}{?categoryValue}{?limit}{?offset}]

Retrieve a list of Categories that have been created.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
        
+ Response 200
    + Body
    
            {
                "categories":[
                    {
                        "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                        "key": "someCategoryKey",
                        "value": "someCategoryValue"
                    }, 
                    {
                        "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                        "key": "giftbit_order",
                        "value": "my order name"
                    },
                    {
                        "categoryId": "category-abe0bf1085fc49f88fc1545a00102800",
                        "key": "giftbit_type",
                        "value": "PROMO"
                    }
                ]
            }

## Codes [/codes/{fullcode}]

A Code represents the financial device that is worth value to you and your store.  The fullcode is what is distributed to your recipients. Your external-facing experience (balance checks, transaction history, and checkout/use of value) should interact with the Code and Code Transaction endpoints described here.  Only these endpoints accept fullcodes.

You are never required to store the fullcode internally in your system, and we recommend for security that you do not.  You may interact internally (for customer support) with a Code through its corresponding cardId as described in the 'Card' reference.


### Retrieve basic Code information [GET]

Look up information about a code given the fullcode.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
+ Parameters 
    + fullcode (string) - The code given to the customer.
    
+ Response 200
    + Attributes
        + Code
            + codeLast4 (string) - The last 4 characters of the Code.
            + currency (string) - The 3 character ISO-4217 currency.
            + initialValue (number) - The value of the code at creation in the smallest currency unit (such as cents).
            + expires (string) - The code's expiry date and time.  This field will be ommitted if the code was not created with an expiry.  ISO-8601 format.
            + dateCreated (string) - The Giftbit system time of the creation in ISO-8601 format.

    + Body
    
            {
                "code":
                {
                    "codeLast4": "BF8Z",
                    "currency":"USD",
                    "initialValue":2500,
                    "expires":"2020-08-06T08:00:00.000+0000",
                    "dateCreated":"2016-08-10T08:00:00.000+0000"
                }
            }


### Retrieve Code balance [GET /codes/{fullcode}/balance]

Retrieve the balance of a Code considering all previous Transactions.  

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + fullcode (string) - the fullcode associated with the Code object and value given to the customer.
    
+ Response 200

    + Body
    
            {
                "balance":{
                    "currentValue": 200
                }
            }


### Use Code value [POST /codes/{fullcode}/transactions] 

Use some or all of the remaining value of the Code (create a Transaction on the Code).  Attempting to use value for a Code that is expired or does not have enough remaining value will result in an error.

+ Parameters 
    + fullcode (string) - The gift code.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

    + Attributes
        + value (number, required) - The amount to use from the Code in the smallest currency unit (such as cents).  Must be a postive number.  If the amount exceeds the current value of the code, an error will result.
        + currency  (string, required) The 3 character ISO-4217 currency code.  The supplied currency must match the currency of code when it was created or an error will result.
        + userSuppliedId (string, required) - A unique identifier for this transaction.

    + Body
    
            {
                "userSuppliedId": "12345678",
                "value": 165,
                "currency": "USD"
            }

+ Response 200

    + Attributes
        + value (number) - The amount of the transaction in the smallest currency unit (such as cents). Should equal value in the request.
        + transactionId (string) - The unique Id for this transaction assigned by Giftbit at creation time.
        + userSuppliedId (string) - Identifier of the transaction (should equal transactionId in the request).
        + valueAvailableAfterTransaction (number) - The current value of the code (after this transaction) in the smallest currency unit (such as cents).
        + dateCreated (string) - The Giftbit system time of the creation in ISO-8601 format.

    + Body
    
            {
                "transaction":{
                    "userSuppliedId": "12345678",
                    "transactionId":"transaction-d7yc1b55-6de6-49e5-82d5-fd37edb5f8ea",
                    "value": 165,
                    "dateCreated": "2016-08-10T08:00:00.000+0000",
                    "valueAvailableAfterTransaction": 4835
                    }
                }
            }
        
### Retrieve all Transactions for a Code [GET /codes/{fullcode}/transactions/{?limit}{?offset}]

Retrieve all Transactions for a Code given the fullcode.  Useful if you'd like to show a recipient their code usage history.  Results are returned in descending order of creation (newest first).

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
   
+ Parameter
    + limit (number, optional) - For pagination.  The maximum number of results to return at once. Default 100.
    + offset (number, optional) - For pagination. The offset of the first results in the total results. Default 0.
+ Response 200

    + Body
    
            {
                "transactions":[
                    {
                        "userSuppliedId": "12345",
                        "transactionId":"transaction-d7yc1b55-6de6-49e5-82d5-fd37edb5f8ea",
                        "value": 500,
                        "dateCreated": "2016-08-11T08:32:00.000+0000",
                        "valueAvailableAfterTransaction": 800
                    },
                    {
                        "userSuppliedId": "12344",
                        "transactionId":"transaction-avji1b55-6gu7-4ke5-82s5-fd37edb5ju9a",
                        "value": 700,
                        "dateCreated": "2016-08-10T08:00:00.000+0000",
                        "valueAvailableAfterTransaction": 1300
                    }
                ],
                "pagination":{
                    "count": 2,
                    "limit": 100,
                    "maxLimit": 1000,
                    "offset": 0,
                    "totalCount": 2
                }
            }
    
### Retrieve a single Transaction for a Code using the transactionId [GET /codes/{fullcode}/transactions/{transactionId}]

Retrieve a Transaction for a Code given the fullcode and the transactionId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
+ Response 200

    + Body
    
            {
                "transaction":{
                    "userSuppliedId": "12345678",
                    "transactionId":"transaction-d7yc1b55-6de6-49e5-82d5-fd37edb5f8ea",
                    "value": 165,
                    "dateCreated": "2016-08-10T08:00:00.000+0000",
                    "valueAvailableAfterTransaction": 4835
                    }
                }
            }
    
### Retrieve a single Transaction for a Code using the userSuppliedId [GET /codes/{fullcode}/transactions?userSuppliedId={userSuppliedId}]

Retrieve a Transaction for a Code given the fullcode and the userSuppliedId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
+ Response 200

    + Body
    
            {
                "transaction":{
                    "userSuppliedId": "12345678",
                    "transactionId":"transaction-d7yc1b55-6de6-49e5-82d5-fd37edb5f8ea",
                    "value": 165,
                    "dateCreated": "2016-08-10T08:00:00.000+0000",
                    "valueAvailableAfterTransaction": 4835
                    }
                }
            }
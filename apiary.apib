FORMAT: 1A
HOST: https://api.lightrail.com/v1/

# Lightrail Documentation
Welcome to Lightrail. Lightrail is a platform for managing value.

Lightrail offers a [Drop-in Gift Card solution](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/docs/quickstart/drop-in-gift-cards.md#drop-in-gift-cards) and also provides the functionality to create custom account credit and gift card integrations. Lightrail enables you to create promotions on top of your account credit or gift card programs allowing you to build long lasting relationships with your customers.

Contact us anytime at hello@lightrail.com â€” we are here to help you solidify your use-case and implementation.

You're looking at the full reference documentation providing detailed information on each API endpoint. Lightrail's introductory and quickstart documentation can be found [here](https://www.lightrail.com/docs).  
We recommend beginning with our quickstarts as they support many integrations and utilize our [client libraries](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/docs/client-libraries.md#client-libraries). For more complex integrations, see our full [reference documentation](https://www.lightrail.com/docs).         

## Common Use Cases - Quickstarts
We recommend starting with the following quickstart guides. 

### Drop-in Gift Cards
Lightrail's [Drop-in Gift Card solution](https://www.lightrail.com/docs/#drop-in-gift-cards/drop-in-gift-cards) empowers you to offer gift cards from your site in days. It is component based, using simple HTML snippets.
When a customer redeems a gift card, the value is applied to an account that belongs to the customer, also powered by Lightrail.
Minor updates must be made to your checkout process to allow the customer's account to be used as a payment option.

To get started check out our [Drop-in Gift Card documentation](https://www.lightrail.com/docs/#drop-in-gift-cards/drop-in-gift-cardss).

### Accounts
Use Lightrail to apply gift cards and points directly to customer accounts. This allows you to create a seamless purchase experience for your customers.

Check out our [accounts documentation](https://www.lightrail.com/docs/#accounts/accounts) to get started.

With customer accounts in place you can learn your customers' purchase history and drive engagement using promotions.

### Promotions
A Lightrail promotion is rule-based value that is attached to gift cards or accounts.
Promotions can be used to incentivize customers "when" to buy, along with "what" to buy. 
For example, a promotion could be a _$10 off boxing week sale_ or _$5 off if your purchase is over $25_; the possibilities are endless.

Check out our [promotions documentation](https://www.lightrail.com/docs/#promotions/promotions) for more information.  

## Getting Started
[Sign up](https://www.lightrail.com/app/#/register) for a Lightrail account. 

### API Keys and Authorization
Create your API key in the [Integrations](https://www.lightrail.com/app/#/account/api) section of your account. 

To make an API call Lightrail requires the HTTP header `Authorization: Bearer `.

#### Base URL
The base URL for the Lightrail API is `https://api.lightrail.com/v1/`.

#### First Call
To test your authorization use our `ping` endpoint.

```curl https://api.lightrail.com/v1/ping --header "Authorization: Bearer <apiKey>"```

### Testing 
When you first sign into your account you will be in test mode. Test mode is used for development allowing you to build in and test functionality. It comes with sample data to give you a sense of what your Lightrail account will look like. 

## Support
We have [client libraries](https://www.lightrail.com/docs/#client-libraries/client-libraries) in many languages to speed up your integration. 
We also have a sample [Drop-In Gift Card application]((https://github.com/Giftbit/stripe-integration-sample-webapp)) containing examples in JavaScript and PHP with Java and Ruby coming soon.   

Please [contact us](mailto:hello@lightrail.com) any time, we're here to help.

## Implementation Details

### Idempotency 
The Lightrail API is idempotent. HTTP `POST` requests against the API require a `userSuppliedId` to be provided in the request body as an idempotency key. 
This means that making the same request twice with the same `userSuppliedId` will only result in creating a single object in the API. Note, both requests will have an identical response.
  
If the request body has changed but is using the same `userSuppliedId` you'll receive a `HTTP 409 - Conflict Error`. 

Lightrail's 'list' endpoints accept `userSuppliedId` as a query parameter. This provides a way of linking objects from your system to Lightrail.  

#### ShopperIds
If you've been using the Lightrail [client libraries](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/docs/client-libraries.md#client-libraries) you'll have seen references to the `shopperId`. The `shopperId` is simply a customer ID from your system. Using the client-libraries allows you to make requests against a customer's account in Lightrail directly based off their customer ID from your system. Note, the client libraries use `shopperId` as an alias for `userSuppliedId`.

### Currencies 
The Lightrail API uses the three-character currency codes from the ISO-4217 standard, e.g. USD, CDN, and AUD. The special value XXX is defined by this standard for representing any non-currency values such as points.

All currency values are represented by the smallest currency unit, e.g. cents for USD or CAD. For example, to create a gift card for $1.00 USD, you would set the `initialValue=100`.

Lightrail does not do any form of currency exchange. If you create a gift card or account, you can only attach promotions in that same currency.

### Dates
Lightrail uses the `yyyy-MM-dd'T'HH:mm:ss.SSSZ` format from the ISO-8601 standard for all dates. This allows you to control things such as value expiry dates in fine granularity to the time zone of your choosing. You can see various examples of date values in the endpoint documentation. 

### Handling Error Responses

Clients should always check the HTTP status code of the response and act accordingly if the response is not a 200.

The response JSON object in case of an error will be in the following format:
- `status`: (number) - echoing the HTTP response code.    
- `message`: (string, optional) - a descriptive error message if one is available. 
- `messageCode`: (string, optional) - a code for the error that can be consumed programmatically.

Note that the error `message` is intended to be shown to an end user; it may change from time to time to improve clarity and might be translated into other languages. For programmatic use, you should use the `messageCode` which reliably corresponds to the particular error case and is not subject to change without notice.

#### Example error responses:
| Status | Description         | Message                                  |
| :----- | ------------------- | ---------------------------------------- |
| `400`  | bad request         | `Missing required parameter 'userSuppliedId'` |
| `401`  | unauthorized        | `Unauthorized.`                          |
| `409`  | idempotency failure | `A different transaction with the same userSuppliedId already exists.` |
| `429`  | rate-limit failure  | `Too many requests.`                     |

<a name="object-model-anchor"></a>
## The Lightrail Object Model
The full API object model is here for your reference. We will discuss these objects and their relationships in this section. Depending on your use-case you may only need some of these objects and the corresponding endpoints. If you prefer to start with something more hands-on, feel free to move on to [Common Use-Cases](#use-cases-anchor).   


![Lightrail Object Model](https://raw.githubusercontent.com/Giftbit/Lightrail-API-Docs/master/assets/lightrail-objects.svg?sanitize=true)

### Core Objects: Cards and Value Stores

The Card is the core concept in the Lightrail model and provides the main interface for storing, maintaining, and interacting with any sort of value that your business wishes to issue. Currently, there are two types of cards in Lightrail, _Gift Cards_ and _Account Cards_, which are distinguished by their `cardType` attribute. We will discuss these two types of cards in a bit.

A Card's value is stored in an object called a _Value Store_ which represents a specific instance of issued value and its attributes, such as its amount and validity period.  

When a Card is created, a `principal` Value Store is automatically created and added to it. When additional promotions are added to a Card, they are represented as `attached` Value Stores. Unlike `attached` Value Stores which are often short-lived, the `principal` Value Store is tied to the Card throughout its lifetime and represents the overall state of the Card. For example, if the Principal Value Store is expired or canceled, the Card is also considered expired or canceled.

For example, a customer can buy a gift card with a primary value of $30 which never expires. This is stored in the Card's `principal` Value Store. Later, and in order to encourage the recipient to spend the gift value, you may attach a $5 promotional value to this Card as part of your _Back to School_ campaign, only valid in the last week of August. While this `attached` Value Store is active, the Card holder can spend $35 with the Card; when the attached Value Store expires at the end of August, the Principal Value Store will still be valid and the Card can still be used up to $30. See [the diagram below](#transaction-valustore-anchor) for a depiction of this example.


### Programs
A Lightrail _Program_ is a template for issuing Lightrail value, in the form of Value Stores. Programs specify the general attributes of Value Stores that derive from them, such as currency, validity period, minimum/maximum amount, as well as the constraints that apply to spending them, known as _Redemption Rules_.

Lightrail recognizes that issuing value seldom happens in isolation and is usually part of a broader context which we call a Program. Therefore, whenever a new Value Store is created (e.g. at the time of Card creation or attaching promotions) you need to specify the Program used for creating that Value Store. As an analogy, think of Programs as minting facilities and Value Stores as coins. Just as valid coins can only be created by a minting facility, Lightrail values can only be issued as part of a Program and are subject to its broader rules and restrictions. 

Lightrail currently supports two types of Programs which are differentiated based on their `type` attribute: 

- _Principal Programs_ are used to organize and create  `principal` Value Stores, namely to create new Cards, and
- _Promotional Programs_ are used to create `attached` Value Stores which can be added to existing cards and provide some additional promotional value to the card holder subject to more restrictive conditions.

Note that Cards are also connected to Programs through their Value Stores and cannot exist in isolation. Therefore, before you start creating Cards, you need to set up at least one Principal Program to be used for creating the Principal Value Stores of your Cards. The Principal Value Store is created automatically in the course of Card creation, but you have to provide the `programId` in the Card creation request. Account Cards can be an exception to this as we will see in a bit.

Since Lightrail does not handle currency exchange, it requires a single currency for all the Value Stores on the Card. For example, if you create a Card with the Principal Value Store in CAD, all subsequent attached promotions must derive from CAD Programs.

Programs are also a great way to organize, track, and analyze values. For example, you probably want to know how many people took advantage of your _Back to School_ promotions and how it affected your sales. The Lightrail Web App provides various reports, stats, and analyses for the values created in each Program. 

You can create programs using the Lightrail Web App; the API also has [an endpoint](#get-programs-anchor) for programmatically retrieving the list of your Programs.

### Contacts

Individual customers are represented by _Contact_ objects in Lightrail. You can store some basic information about the individual such as their name and email address on the Contact object. Contacts can be associated with Cards in order to track and analyze different Lightrail values held by a customer as we will discuss below.

### Gift Cards

As the name implies, Gift Cards represent a value created as a gift. Lightrail Gift Cards have a `fullcode`,  a  unique and unguessable alpha-numeric code, also referred to as Gift Code, which can be used by the Gift Card recipient to redeem its value.

Since anyone who knows the `fullcode` can redeem the Gift Card value, the `fullcode` is often delivered to the Gift Card's recipient in confidence. To minimize the risk of its exposure (e.g. in the course of passing JSON objects to the browser) only [one specific Lightrail endpoint](#get-fullcode-anchor) returns the `fullcode` and other endpoints only return the last four characters of the code when necessary. For similar reasons, we recommend that you refrain from persisting the `fullcode` in your database or logs.

While Contacts are not mandatory for Gift Cards, it is possible and recommended to associate a Gift Card with a Contact when you know the recipient. This will enable tracking all Lightrail values available to a customer both programmatically via the API and in the Lightrail Web App.

### Account Cards 

Account Cards represent values associated with an individual customer, represented by a linked Contact object. Account Cards can essentially be thought of as a customer's account, making them suitable for implementing customer account credit or points programs. Lightrail requires that a Contact has only one Account Card per currency. This makes handling transactions against account credits simpler as will be discussed in the [Account Credit Use-Case](#use-cases-account-credits-anchor).

Unlike Gift Cards, since Account Cards are tied to a known customer, they do not have a `fullcode` and interaction with their value is only possible via the Card object interface.

To keep creation of Account Cards simpler, Lightrail does not require specifying a Program for Account Card creation and uses a default Program automatically created under the hood. The Principal Value Stores of all of your Account Cards (in each currency) are derived from that default Program. 

### Transactions

Various interactions with the Lightrail system take place in the form of _Transactions_. The most common types of Transactions are adding or deducting value from a Card, also known as  _funding_ and _drawdown_. Some other actions on Cards or Value Stores are also modelled as Transactions; for example, _activation_, _cancellation_, _freezing_, and _unfreezing_.

Lightrail supports a two-step _pending_ drawdown. A pending drawdown Transaction withholds the funds temporarily until eventually they are collected via a subsequent _capture_ Transaction, or canceled via a _void_ Transaction. 

Transactions are [primarily](#post-transaction-by-cardid-anchor) created by `cardId`.  But to simplify Gift Card redemption at the checkout, Lightrail also provides [an endpoint](#post-transaction-by-fullcode-anchor) for creating Transactions by a Card's `fullcode`. To improve security, this endpoint only allows drawdown Transactions.

One of the features of the Lightrail API is encapsulating the Card Value Stores behind a simple interface at the time of Transaction. While you can add many promotional attached Value Stores to Cards, at Transaction time, you do not need to worry about the logic of splitting the drawdown value against potentially many Value Stores; Lightrail transaction processing automatically handles this for you. The  `transactionBreakdown` object in a Transaction response provides the details of how the funds were extracted from different ValueStores by Lightrail behind the scene.

For example, if there is $30 in the Principal Value Store and a $5 attached Value Store from a promotional _Back to School_ program, when attempting a $8 drawdown, Lightrail automatically decides the break-down of this amount against existing Value Stores and you do not have to specify or even be aware of them. In this case, for example, Lightrail will prioritize the spending of the $5 value which is closer to its expiry date, and then, charges the remaining $3 from the Principal Value Store.  

### Redemption Rules

Redemption Rules are a powerful feature of Lightrail which enable setting sophisticated conditions on how value can be spent. Redemption rules are defined on Programs and are applied to the Value Stores created from them.

Redemption Rules can unlock powerful marketing promotions such as, "$10 off if you spend at least $100," or "$15 off if you buy two or more pairs of jeans." Currently, Redemption Rules are defined at the time of Program creation in the Lightrail Web App. 

When transacting against a Card and looking to collect the funds from its different Value Stores, Redemption Rules determine whether or not each of the Card's Value Stores is spendable for that Transaction. Every rule is a Boolean expression that operates on the Transaction request object's `metadata`; the Value Store will be available for spending on that Transaction only if the rule evaluates to `true`. 

Transaction `metadata` is a generic JSON object provided in the Transaction request object which represents any additional information you wish to provide and store, including contextual information based on which redemption rules operate. This provides a very powerful and flexible mechanism to define any relevant metadata in the Transaction request and use this metadata to make decisions about unlocking promotional values. 

Check out the <a href="https://github.com/Giftbit/Lightrail-API-Docs/blob/master/use-cases/redemption-rules.md" target="_blank">Redemption Rules Implementation Guide</a> and <a href="https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/RedemptionRules.md" target="_blank">Redemption Rules Reference Documentation</a> for further details.

### Walk-Through Example

Suppose that to boost your sales you want to give a $5 promotional value to customers who would spend at least $100 at your online store.

This rule can be formulated as the following:

`metadata.cart.total >= 10000` 

Note that `cart ` is a custom metadata object defined by your system. After you create a new Promotion Program with this redemption rule, you can create a new $5 Value Store derived from this Program and attach it to some Account or Gift Cards, thereby giving them a $5 promotional value subject to this condition. 

At the checkout page, your e-commerce system examines the customer's cart and accordingly provides a `cart` object in the `metadata` attribute in the Transaction request object. For example:

```
"metadata": {
    "cart": {
      "total": 10350
    }
}
```

Once this Transaction request is received, Lightrail will iterate through the Card's Value Stores and evaluate their redemption rules against the Transaction `metadata`. In this case, if the `cart.total` is greater than or equal to $100 (i.e. 10000 cents), it unlocks the $5 Value Store for spending. The following diagram depicts this process for a sample Transaction. 

<a name="transaction-valustore-anchor"></a>

![Transaction, Value Stores, and Redemption Rules](https://raw.githubusercontent.com/Giftbit/Lightrail-API-Docs/master/assets/transaction-valustores.svg?sanitize=true)

Lightrail Transaction object includes a `transactionBreakdown` which provides the breakdown of how the value of the Transaction was extracted from the Card's Value Stores. Here is an example for the above example:

```
"transactionBreakdown":[  
      {  
        "value":-300,
        "valueAvailableAfterTransaction":2700,
        "valueStoreId":"v9nxx5p"
      },
      {  
        "value":-500,
        "valueAvailableAfterTransaction":0,
        "valueStoreId":"v6mxx9a"
      }
    ]
```

You can use this information to show the customer what promotions were unlocked in their current checkout. 

Moreover, when using the Transaction simulation endpoints, you can compare the list of unlocked Value Stores with the full list of all Value Stores on the Card, and show the customer what Value Stores were NOT unlocked together with a hint about what they can do to unlock more promotions. This is an important user experience to encourage customers to take advantage of available promotions and boost your sales.  

Check out the <a href="https://github.com/Giftbit/Lightrail-API-Docs/blob/master/use-cases/redemption-rules.md" target="_blank">Redemption Rules Implementation Guide</a> for a more detailed example.

##Notes
### Legal Responsibilities
The Lightrail API provides a flexible infrastructure to implement various branded currency solutions, including gift cards, unique promo codes, account credits, refunds, etc. It is the responsibility of the API users and their organization to understand and comply with the laws and regulations in their jurisdiction in all aspects of their implementation.

### Documentation
This interactive documentation provides full code samples in many popular languages and enables you to directly make test calls and checkout the API functionality. The sources for the API Blueprint file that produces this documentation can be found on our [GitHub Repository](https://github.com/Giftbit/Lightrail-API-Docs/tree/master/apiary-sources). If you notice any issues or have a suggestion for improvement, feel free to contact us or create a pull request.

## Ping and Health Check [/ping]

Use this endpoint for health-checking the API and for testing whether your API key is working correctly. 

<a name="ping-endpoint-anchor"></a>
### Ping [GET]
+ Request (application/json)
    + Headers

            Authorization: Bearer <API_KEY>

+ Response 200
    + Attributes
        + username (string) - The email address associated with the account.
        + mode (string) - String indicating whether the credentials provided are for TEST or LIVE mode.
        + scopes - A list of scopes associated with the credentials.
        + roles - A list of roles associated with the credentials.
        + effectiveScopes - A list of the effective scopes as a result of combining roles and scopes.
        
    + Body
    
            {
              "user":{
                "username":"tim+apidocresfresh@giftbit.com",
                "mode":"TEST",
                "scopes":[
                ],
                "roles":[
                  "accountManager",
                  "contactManager"
                ],
                "effectiveScopes":[
                  {
                    "deny":false,
                    "scopePath":[
                      "lightrailV1",
                      "account"
                    ]
                  },
                  {
                    "deny":false,
                    "scopePath":[
                      "lightrailV1",
                      "payments"
                    ]
                  }
                ]
              }
            }
        
+ Response 401

        {
            "status": 401,
            "message": "Unauthorized",
            "code": "CREDENTIALS_INVALID"
        }

## Cards [/cards/]
Use these endpoints to create and manage your Gift Cards and Account Cards.

---
### List Cards [GET /cards/{?contactId}{?cardType}{?currency}{?userSuppliedId}{?limit}{?offset}]
Retrieve a paginated list of Cards. The search can be narrowed down based on various parameters.

---
+ Request (application/json)
    + Headers
    
             Authorization: Bearer <API_KEY>
   
+ Parameter

    + contactId (string, optional) - Retrieve only the Cards belonging to a specific Contact.
    + cardType (string, optional) - `ACCOUNT_CARD`, `GIFT_CARD`.
    + currency (string, optional) - The three-character ISO-4217 currency.
    + userSuppliedId (string, optional) - Retrieve the Card created with a specific `userSuppliedId`. Note that since `userSuppliedId`s are unique, this guarantees that exactly one Card will be returned if it exists. 
    + limit (number, optional) - For pagination. The maximum number of results to return at once. 
      + Default: 100
    + offset (number, optional) - For pagination. The offset of the first results in the total results. 
      + Default: 0

+ Response 200
    + Attributes 
        + cards (array[Card])
        + pagination (Pagination)

    + Body
    
            {
              "cards":[
                {
                  "cardId":"card-a0xx82",
                  "userSuppliedId":"anonymous-giftcard28",
                  "contactId":null,
                  "dateCreated":"2017-07-28T21:21:00.606Z",
                  "categories":[
                    {
                      "categoryId":"category-3dxxc3",
                      "key":"giftbit_order",
                      "value":"2017-07-28"
                    },
                    {
                      "categoryId":"category-d2xx57",
                      "key":"giftbit_program",
                      "value":"program-93xxe3"
                    }
                  ],
                  "cardType":"GIFT_CARD",
                  "currency":"USD"
                },
                {
                  "cardId":"card-15xxbd",
                  "userSuppliedId":"anonymous-giftcard3",
                  "contactId":null,
                  "dateCreated":"2017-07-28T21:21:00.599Z",
                  "categories":[
                    {
                      "categoryId":"category-3dxxc3",
                      "key":"giftbit_order",
                      "value":"2017-07-28"
                    },
                    {
                      "categoryId":"category-d2xx57",
                      "key":"giftbit_program",
                      "value":"program-93xxe3"
                    }
                  ],
                  "cardType":"GIFT_CARD",
                  "currency":"USD"
                }
              ],
              "pagination":{
                "count":2,
                "limit":2,
                "maxLimit":1000,
                "offset":0,
                "totalCount":94
              }
            }


### Retrieve Card [GET /cards/{cardId}]
Retrieve the Card object by its `cardId`. 

---
+ Parameters 
    + cardId (string, required) - The Lightrail Card ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200

    + Attributes 
        + card (Card)

    + Body
        
            {
              "card":{
                "cardId": "card-6aa566c9e25f45f889b475a079675a89",
                "userSuppliedId": "giftcard-d37e",
                "contactId": null,
                "dateCreated": "2018-01-15T23:09:15.682Z",
                "categories":[
                  {
                    "categoryId": "category-e595f03510f14c389866c3f7ed12cfd7",
                    "key": "giftbit_order",
                    "value": "2018-01-15"
                  },
                  {
                    "categoryId": "category-621196a93a1e4ee3a55949ca6fa34291",
                    "key": "giftbit_program",
                    "value": "program-4adf6d039dba4232876011232560f2cd"
                  }
                ],
                "cardType": "GIFT_CARD",
                "currency": "USD"
              }
            }

### Create Account Card [POST /cards]
Create a Card of type `ACCOUNT_CARD` which is associated with an existing Contact.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
            
    + Attributes 
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
        + cardType (string, required) - ACCOUNT_CARD
        + currency (string, required) - The three-character ISO-4217 currency.
        + initialValue (number, optional) - If not provided, will default to 0.
        + categories (object, optional) - An object of key-value pairs. For example: `'categories': {'city':'Seattle', 'country':'USA'}`.
        + contactId (string, required) - Note, the Contact must be created before the request to create the card.
        + expires (string, optional) - Defaults to never expires.
        + startDate (string, optional) - The date for which the associated ValueStore will become usable.
        + inactive (boolean, optional) - If `true` the Card's `PRINCIPAL` ValueStore will have an `INACTIVE` balance.
        + metadata (Metadata, optional) - A key-value JSON object to store any additional information. The `giftbit_*` namespace for keys is reserved.
        
    + Body
    
            {
              "userSuppliedId":"alice-account-usd",
              "cardType":"ACCOUNT_CARD",
              "contactId":"contact-83deaef84b804fb38ef92aea81ed134a",
              "currency":"USD",
              "initialValue":500,
              "categories": {
                "city":"seattle"
              }
            }
        
+ Response 200
    + Attributes
        + card (Card)
        
    + Body

            {
              "card":{
                "cardId": "card-6bd0dee5efe047de9c2e3b11d11be97e",
                "userSuppliedId": "alice-account-usd",
                "contactId": "contact-83deaef84b804fb38ef92aea81ed134a",
                "dateCreated": "2018-01-15T22:52:18.749Z",
                "categories":[
                  {
                    "categoryId": "category-1b483e9c4e864a9fa9fe32b350ec85f9",
                    "key": "city",
                    "value": "seattle"
                  },
                  {
                    "categoryId": "category-e595f03510f14c389866c3f7ed12cfd7",
                    "key": "giftbit_order",
                    "value": "2018-01-15"
                  },
                  {
                    "categoryId": "category-fbbb512ccf564b198c15af55f83ba1ac",
                    "key": "giftbit_program",
                    "value": "program-account-USD-user-b3dc5abb7a754911a68bc0e96cb8f028"
                  }
                ],
                "cardType": "ACCOUNT_CARD",
                "currency": "USD"
              }
            }
            

### Create Gift Card [POST /cards]
Create a Card of type `GIFT_CARD`.

---
+ Request (application/json)

    + Headers

            Authorization: Bearer <API_KEY>
            
    + Attributes 
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
        + cardType (string, required) - GIFT_CARD
        + initialValue (number, optional) - If not provided, will default to 0.
        + currency (string) - The three-character ISO-4217 currency.
        + programId (string, required) - The Lightrail Program ID.
        + categories (object, optional) - An object of key-value pairs. For example: `'categories': {'city':'Seattle', 'country':'USA'}`.
        + contactId (string, optional) - Note, the Contact must be created before the request to create the card.
        + expires (string, optional) - Defaults to never expires.
        + startDate (string, optional) - The date for which the ValueStore will become usable.
        + inactive (boolean, optional) - If `true` the Card's `PRINCIPAL` ValueStore will have an `INACTIVE` balance.
        + metadata (Metadata, optional) - A key-value JSON object to store any additional information. The `giftbit_*` namespace for keys is reserved.

    + Body
    
            {"cardType":"GIFT_CARD","expires":"2019-10-01T00:27:02.910Z","initialValue":5000,"metadata":{"orderId":"x72a3sx5e","purchaserEmail":"alice@wonderland.ca","purchaserName":"Alice Liddell","recipientEmail":"test@test.ca","transactionId":"tr2re3t0y2r3u0w6r"},"programId":"program-4adf6d039dba4232876011232560f2cd","startDate":"2018-08-01T00:27:02.910Z","userSuppliedId":"giftcard-d37e"}
        
+ Response 200
    + Attributes
        + card (Card)
        
    + Body

            {"card":{"cardId":"card-6f92c00372594403b3e042c0fc02d159","cardType":"GIFT_CARD","categories":[{"categoryId":"category-a28cfff608d34bcfaa665b4b06966e0d","key":"giftbit_order","value":"2018-01-15"},{"categoryId":"category-8167ff746e1a4d85843d98a9381b11b6","key":"giftbit_program","value":"program-1d404778285644078a2c1c9432929c13"}],"contactId":null,"currency":"USD","dateCreated":"2018-01-15T18:46:51.914Z","userSuppliedId":"giftcard-d37e"}}



### Retrieve fullcode for Gift Card [GET /cards/{cardId}/fullcode]
<a name="get-fullcode-anchor"></a>

Retrieve the `fullcode` (also referred to as Gift Code) associated with a Gift Card. 


---
+ Parameters 
    + cardId (string) - The Lightrail Card ID. Note, Card must have cardType = `GIFT_CARD`.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200
    + Attributes 
        + fullcode (Fullcode)

    + Body
    
            {
                "fullcode":{
                    "code" : "5JBUR-9V922-5EDL8-RP5R5-YYEVY"
                }
            }


### Update Contact on Card [PATCH /cards/{cardId}]
Update the Contact associated with a Card, effectively transferring the Card to another Contact.

---
+ Parameters 
    + cardId (string, required) - The Lightrail Card ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
            
    + Attributes
        + contactId (string, required) - The unique identifier of the new Contact to whom the card must be assigned.
            
    + Body
    
            {
              "contactId":"contact-83deaef84b804fb38ef92aea81ed134a"
            }

+ Response 200

    + Attributes 
        + card (Card)

    + Body
        
            {
              "card":{
                "cardId": "card-6aa566c9e25f45f889b475a079675a89",
                "userSuppliedId": "giftcard-d37e",
                "contactId": "contact-83deaef84b804fb38ef92aea81ed134a",
                "dateCreated": "2018-01-15T23:09:15.682Z",
                "categories":[
                  {
                    "categoryId": "category-621196a93a1e4ee3a55949ca6fa34291",
                    "key": "giftbit_program",
                    "value": "program-4adf6d039dba4232876011232560f2cd"
                  },
                  {
                    "categoryId": "category-e595f03510f14c389866c3f7ed12cfd7",
                    "key": "giftbit_order",
                    "value": "2018-01-15"
                  }
                ],
                "cardType": "GIFT_CARD",
                "currency": "USD"
              }
            }

### Activate Card [POST /cards/{cardId}/activate]
If a card has been created as inactive, you can use this endpoint to activate.

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID. The Card must have been created with `"inactive":true`.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
        
    + Body 
    
            {
              "userSuppliedId":"activate-1"
            }
    
+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body
    
            {
              "transaction":{
                "transactionId":"transaction-7axx2f",
                "value":500,
                "userSuppliedId":"activate-1",
                "dateCreated":"2017-07-28T22:12:19.924Z",
                "transactionType":"ACTIVATE",
                "transactionAccessMethod":"CARDID",
                "valueAvailableAfterTransaction":500,
                "giftbitUserId":"user-1dfxx32",
                "cardId":"card-8bxxa9",
                "currency":"USD",
                "codeLastFour":"99SY"
              }
            }

### Freeze Card [POST /cards/{cardId}/freeze]
Freeze a Card, preventing all transactions until unfrozen. 

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
    + Body 
    
            {
                "userSuppliedId":"freeze-1"
            }
    
+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body

            {
              "transaction":{
                "value": -500,
                "userSuppliedId": "freeze-1",
                "dateCreated": "2018-01-15T23:16:37.955Z",
                "transactionType": "FREEZE",
                "transactionAccessMethod": "CARDID",
                "valueAvailableAfterTransaction": 0,
                "giftbitUserId": "user-b3dc5abb7a754911a68bc0e96cb8f028",
                "cardId": "card-6bd0dee5efe047de9c2e3b11d11be97e",
                "currency": "USD",
                "cardType": "ACCOUNT_CARD",
                "transactionBreakdown":[
                  {
                    "value": -500,
                    "valueAvailableAfterTransaction": 0,
                    "valueStoreId": "value-a9cc0df45bd04fb692f9f0bcba4c1bd3"
                  }
                ],
                "transactionId": "transaction-4fe35a77bebc492e94559afebf74c6b2"
              }
            }       


### Unfreeze Card [POST /cards/{cardId}/unfreeze]
Unfreeze a frozen Card, re-enabling the creation of transactions.

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + userSuppliedId (string, required): Endpoint-unique idempotency ID provided by the client.
   
    + Body 
    
            {
              "userSuppliedId":"unfreeze-1" 
            }
    
+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body

            {
              "transaction":{
                "value":500,
                "userSuppliedId":"unfreeze-1",
                "dateCreated":"2018-01-15T23:17:35.863Z",
                "transactionType":"UNFREEZE",
                "transactionAccessMethod":"CARDID",
                "valueAvailableAfterTransaction":500,
                "giftbitUserId":"user-b3dc5abb7a754911a68bc0e96cb8f028",
                "cardId":"card-6bd0dee5efe047de9c2e3b11d11be97e",
                "currency":"USD",
                "cardType":"ACCOUNT_CARD",
                "transactionBreakdown":[
                  {
                    "value":500,
                    "valueAvailableAfterTransaction":500,
                    "valueStoreId":"value-a9cc0df45bd04fb692f9f0bcba4c1bd3"
                  }
                ],
                "transactionId":"transaction-500aadddee694782b5086367eaf351af"
              }
            }

### Cancel Card [POST /cards/{cardId}/cancel]
Cancel a Card permanently.

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
            
    + Attributes
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
    
    + Body
            
            
            {
                "userSuppliedId": "cancel-1"
            }
    
+ Response 200

    + Body
    
            <<ourscriptbody>

            {
              "card":{
                "cardId":"card-8bxxa9",
                "userSuppliedId":"giftcard2",
                "contactId":null,
                "dateCreated":"2017-07-28T22:11:09.431Z",
                "categories":[
                  {
                    "categoryId":"category-3dxxc3",
                    "key":"giftbit_order",
                    "value":"2017-07-28"
                  },
                  {
                    "categoryId":"category-59xx67",
                    "key":"city",
                    "value":"seattle"
                  },
                  {
                    "categoryId":"category-66xxd2",
                    "key":"giftbit_status",
                    "value":"CANCELLED"
                  }
                ],
                "cardType":"GIFT_CARD",
                "currency":"USD"
              }
            }

## Contacts [/contacts]
Use these endpoints to create, retrieve, and update your Lightrail Contacts. 

---
<a name="contact-list-anchor"></a>

### List Contacts [GET /contacts{?email}{?firstName}{?lastName}{?userSuppliedId}{?limit}{?offset}]
Retrieve a paginated list of Contacts.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
            
+ Parameters 
    + email (string, optional) - The contact's email.
    + firstName (string, optional) - The contact's first name.
    + lastName (string, optional) - The contact's last name.
    + userSuppliedId (string, required) - Retrieve the Contact created with a specific `userSuppliedId`. Note that since `userSuppliedId`s are unique, this guarantees that exactly one Contact will be returned if it exists.
    + limit (number, optional) - For pagination. The maximum number of results to return at once. 
      + Default: 100
    + offset (number, optional) - For pagination. The offset of the first results in the total results. 
      + Default: 0
    
+ Response 200
    + Attributes
       + contact (Contact)
       + pagination (Pagination)

    + Body
            {"contacts":[{"contactId":"contact-9ca2ad32160e4db29f2956e7e75dc92e","dateCreated":"2018-01-25T00:31:30.000Z","email":"bill@example.com","firstName":null,"lastName":null,"userSuppliedId":"create-contact-2"},{"contactId":"contact-1f75ce37b57c4717b47aea9d8f79b79a","dateCreated":"2018-01-25T00:31:30.000Z","email":"alice@example.com","firstName":null,"lastName":null,"userSuppliedId":"create-contact-1"},{"contactId":"contact-c1e7098d25474db58bf55044248e856c","dateCreated":"2018-01-24T23:54:11.000Z","email":"alice@example.com","firstName":null,"lastName":null,"userSuppliedId":"contact-1-123"},{"contactId":"contact-9b22810f07784a05b549ed9192501936","dateCreated":"2018-01-24T19:57:07.000Z","email":"alice@example.com","firstName":null,"lastName":null,"userSuppliedId":"example-contact-1"},{"contactId":"contact-3d5d3a7f63db4236b43720bfe388ddeb","dateCreated":"2018-01-24T19:55:18.000Z","email":"alice@example.com","firstName":null,"lastName":null,"userSuppliedId":"234warawer"},{"contactId":"contact-ec9f60e05a534fd69343ea90cb897cb9","dateCreated":"2018-01-24T19:34:28.000Z","email":null,"firstName":null,"lastName":null,"userSuppliedId":"243awerstdew"},{"contactId":"contact-61adac6647f84590b3a8e10dd39fcb8b","dateCreated":"2018-01-15T18:28:29.000Z","email":"alice@example.com","firstName":"Alice","lastName":"Liddell","userSuppliedId":"314159265359"},{"contactId":"contact-96654868326c45388495688c18f45323","dateCreated":"2018-01-15T18:20:34.000Z","email":"noreply@giftbit.com","firstName":"Jane","lastName":"Smith","userSuppliedId":"12345678"},{"contactId":"contact-e386c8a868114d65b1379272ab14fd3c","dateCreated":"2018-01-10T19:06:55.000Z","email":null,"firstName":"hooray","lastName":null,"userSuppliedId":"706e7db2-67d8dddb-62e8b382"},{"contactId":"contact-fc52ee9812074ab6b82cb68a13db64c0","dateCreated":"2017-09-22T22:52:12.000Z","email":"mpavluk1d@walmart.com","firstName":"Maria","lastName":"Pavluk","userSuppliedId":"57343db5-e5b3-42ce-a391-7d76aa63d3eb"},{"contactId":"contact-ba54f5e830444869ab09ae15d0be6c9e","dateCreated":"2017-09-22T22:52:12.000Z","email":"calberyn@vinaora.com","firstName":"Caryl","lastName":"Albery","userSuppliedId":"186a32b0-c94d-4aa9-a8db-0fcfaa5542b6"},{"contactId":"contact-98184ddd0c1d4b67b276540f6e8e727e","dateCreated":"2017-09-22T22:52:12.000Z","email":"aantyukhino@admin.ch","firstName":"Augustus","lastName":"Antyukhin","userSuppliedId":"90e2d6aa-5efe-4ca8-90ed-c30441fea5c8"},{"contactId":"contact-9299ec258051438886861dfc1147b48b","dateCreated":"2017-09-22T22:52:11.000Z","email":"gafield1c@economist.com","firstName":"Giacobo","lastName":"Afield","userSuppliedId":"6627e7ae-d642-4316-ab35-f497b6e41756"},{"contactId":"contact-3285361e131b4da1b93adf9aa2e37839","dateCreated":"2017-09-22T22:52:10.000Z","email":"dtoonem@rediff.com","firstName":"Dawn","lastName":"Toone","userSuppliedId":"ee6632c2-050b-4949-abe6-aad05bcfda19"},{"contactId":"contact-1f72f75f805a44a084a3c7e7a6fb22e8","dateCreated":"2017-09-22T22:52:10.000Z","email":"smcandrew1b@latimes.com","firstName":"Shir","lastName":"McAndrew","userSuppliedId":"841c6c9a-ff54-4702-b851-014abdb3a933"},{"contactId":"contact-b7ff839f28f7428188eb944e90be91d9","dateCreated":"2017-09-22T22:52:09.000Z","email":"pkryska1a@reference.com","firstName":"Pearla","lastName":"Kryska","userSuppliedId":"6eb2867b-e347-451f-ac9a-7a9425dd69ef"},{"contactId":"contact-1c8b2a9862ad4f8a9f677aacc43582b2","dateCreated":"2017-09-22T22:52:08.000Z","email":"nolenchenkol@alexa.com","firstName":"Novelia","lastName":"Olenchenko","userSuppliedId":"c5d0927b-c628-441e-ac68-34d1ce60a100"},{"contactId":"contact-15bfea1204ca4fb7b37aadb52029a289","dateCreated":"2017-09-22T22:52:08.000Z","email":"jsprott19@cafepress.com","firstName":"Josy","lastName":"Sprott","userSuppliedId":"f7db1c34-7f33-4aa4-b6b8-0592e36921aa"},{"contactId":"contact-7fa3677a1f4e48c5a392bb312cd040e0","dateCreated":"2017-09-22T22:52:07.000Z","email":"gdaelk@reverbnation.com","firstName":"Gennie","lastName":"Dael","userSuppliedId":"4975da9c-92c2-4726-a30e-07c0be7648a5"},{"contactId":"contact-619000985c7a4ca59acfe389051d7175","dateCreated":"2017-09-22T22:52:07.000Z","email":"mimpyj@yolasite.com","firstName":"Miriam","lastName":"Impy","userSuppliedId":"1ca28c4c-9ca1-4b21-838e-a4007c050794"},{"contactId":"contact-4f74b643ceb34437a3f04f251cc1c25b","dateCreated":"2017-09-22T22:52:07.000Z","email":"rcrosland18@alibaba.com","firstName":"Richmound","lastName":"Crosland","userSuppliedId":"ae7d4602-b0c3-4cad-87d2-3fb2b8cb4e9d"},{"contactId":"contact-cefe799dd4e0437ba5bd4561a68b23db","dateCreated":"2017-09-22T22:52:06.000Z","email":"kstubberti@desdev.cn","firstName":"Kalvin","lastName":"Stubbert","userSuppliedId":"55b2ac5f-e6c0-486f-80b5-6713a35b5add"},{"contactId":"contact-c192d1afa8024cf08729a72a3529978f","dateCreated":"2017-09-22T22:52:06.000Z","email":"dpitkins17@goo.gl","firstName":"Dorthea","lastName":"Pitkins","userSuppliedId":"8d6a97af-695a-472f-bd05-8844499f5ee6"},{"contactId":"contact-8fc050bb487b4c849bc5494e026b2f66","dateCreated":"2017-09-22T22:52:06.000Z","email":"mdelamar16@netvibes.com","firstName":"Meredeth","lastName":"Delamar","userSuppliedId":"25fdeab2-3f9d-49af-b2ea-70d54a0c718e"},{"contactId":"contact-b523a7b4e7d74defb8be46e8fd43520d","dateCreated":"2017-09-22T22:52:05.000Z","email":"vfirebraceg@istockphoto.com","firstName":"Vladamir","lastName":"Firebrace","userSuppliedId":"81bffefb-34e1-41f6-b407-ace166b68972"},{"contactId":"contact-56587596ff854ccebbae43613f1d27bd","dateCreated":"2017-09-22T22:52:05.000Z","email":"mbiermatowiczh@prlog.org","firstName":"Merv","lastName":"Biermatowicz","userSuppliedId":"f65e7901-9534-4e2f-b84c-67a9df66639d"},{"contactId":"contact-363fd5f9e3744664bccd880ee9cc6641","dateCreated":"2017-09-22T22:52:05.000Z","email":"bsauter15@arstechnica.com","firstName":"Bernardine","lastName":"Sauter","userSuppliedId":"2b2b480a-430f-4138-92a5-996499350813"},{"contactId":"contact-30f68d2c4994458991e1a0ea872f51d4","dateCreated":"2017-09-22T22:52:05.000Z","email":"slong14@skyrock.com","firstName":"Selina","lastName":"Long","userSuppliedId":"c839f79c-cf26-4e43-aa2f-b42162a1ff0a"},{"contactId":"contact-f1e0ab59b0dc40b48c3c06108417902c","dateCreated":"2017-09-22T22:52:04.000Z","email":"saffleckf@unc.edu","firstName":"Silvester","lastName":"Affleck","userSuppliedId":"12efdd1f-baa0-4759-873f-b566c7b28068"},{"contactId":"contact-90fff1a000bd4348b278c577be57dd71","dateCreated":"2017-09-22T22:52:04.000Z","email":"dkirrage13@jimdo.com","firstName":"Darell","lastName":"Kirrage","userSuppliedId":"b5f1304e-5f10-450e-a3ef-1c49966fc4ab"},{"contactId":"contact-f3a9a67dae8d4412880edd38d504e5f3","dateCreated":"2017-09-22T22:52:03.000Z","email":"cmcchruitere@homestead.com","firstName":"Chere","lastName":"McChruiter","userSuppliedId":"8b183db8-c7f1-4dc2-b010-c9c03effa4a7"},{"contactId":"contact-e31a8cc977354319ac14898d6223c142","dateCreated":"2017-09-22T22:52:03.000Z","email":"gbamsey12@ycombinator.com","firstName":"Grier","lastName":"Bamsey","userSuppliedId":"0196e14c-b597-4035-a713-06f8595cdd07"},{"contactId":"contact-5be302e066844a1f8174c44c9fa8576b","dateCreated":"2017-09-22T22:52:03.000Z","email":"clomaxd@miitbeian.gov.cn","firstName":"Cami","lastName":"Lomax","userSuppliedId":"b9de9ba0-6d63-4327-9f54-58573226024d"},{"contactId":"contact-1549577016e64fb88abbcfa65a4f4871","dateCreated":"2017-09-22T22:52:03.000Z","email":"sbarhems11@si.edu","firstName":"Sayre","lastName":"Barhems","userSuppliedId":"72407055-7b36-4d53-a030-bd85acce0281"},{"contactId":"contact-d24ec55c3c66474b8822fc4e4326695e","dateCreated":"2017-09-22T22:52:02.000Z","email":"rlowdesb@list-manage.com","firstName":"Rudie","lastName":"Lowdes","userSuppliedId":"085a75fd-2acd-4d89-9705-d43696ee255a"},{"contactId":"contact-cc82380eadc24a4ba31383d914487cec","dateCreated":"2017-09-22T22:52:02.000Z","email":"aaddess10@yelp.com","firstName":"Atlanta","lastName":"Addess","userSuppliedId":"2b358026-052b-4885-b6dc-b574d82cc60f"},{"contactId":"contact-c7f480065d3e42ad87e806a8d1a16dc8","dateCreated":"2017-09-22T22:52:02.000Z","email":"apettifordc@nytimes.com","firstName":"Alasdair","lastName":"Pettiford","userSuppliedId":"b1f7d3ae-fa60-46a0-bf92-b8abefd1b1e3"},{"contactId":"contact-6ec174ef5c394439a462d26e7a8dd1bc","dateCreated":"2017-09-22T22:52:01.000Z","email":"dscolea@free.fr","firstName":"Dela","lastName":"Scole","userSuppliedId":"7a425473-3efb-4e9b-ab6f-5ed675ddb91c"},{"contactId":"contact-68420a1555eb41f3b317a0af24ce4dbb","dateCreated":"2017-09-22T22:52:01.000Z","email":"cedserz@sina.com.cn","firstName":"Cheston","lastName":"Edser","userSuppliedId":"cc92cdf9-cf5b-4979-a0ff-2a0bec955866"},{"contactId":"contact-fa01a34abdae459fbd9a571f895d3efa","dateCreated":"2017-09-22T22:52:00.000Z","email":"ogaskall8@archive.org","firstName":"Obediah","lastName":"Gaskall","userSuppliedId":"1b5d7dcb-eb47-4c72-bc7f-fa2691f659de"},{"contactId":"contact-b6065a2d0b6844b79f3e5f8ed1978c03","dateCreated":"2017-09-22T22:52:00.000Z","email":"csindellx@yandex.ru","firstName":"Cordi","lastName":"Sindell","userSuppliedId":"67ea3590-067e-4688-af3e-c0fd4b424209"},{"contactId":"contact-6ea5d15835a44f48b59b3910ed675342","dateCreated":"2017-09-22T22:52:00.000Z","email":"rtrace9@usatoday.com","firstName":"Rodd","lastName":"Trace","userSuppliedId":"8b9e820f-7cd6-4dd0-b073-9b150e8f0669"},{"contactId":"contact-6305051ff6124a709bb10bfcf2612d9e","dateCreated":"2017-09-22T22:52:00.000Z","email":"mhenaughany@webeden.co.uk","firstName":"Matthias","lastName":"Henaughan","userSuppliedId":"975a6d07-540b-468a-bcf1-25bb969b39a6"},{"contactId":"contact-e4f9c877fbaa48c2aef4a77e0eb93fe2","dateCreated":"2017-09-22T22:51:59.000Z","email":"lhampew@sogou.com","firstName":"Luther","lastName":"Hampe","userSuppliedId":"529fb6cd-a2d0-456f-9d29-dec567c7ea53"},{"contactId":"contact-334e6df129634dcdbd982609d27be41b","dateCreated":"2017-09-22T22:51:59.000Z","email":"msantora7@oaic.gov.au","firstName":"Morten","lastName":"Santora","userSuppliedId":"786ac4f1-966c-45f6-997f-5d9a73b23d00"},{"contactId":"contact-f7d5fd34eb2d401d895d71f722ae1585","dateCreated":"2017-09-22T22:51:58.000Z","email":"eblowfield6@oaic.gov.au","firstName":"Elwira","lastName":"Blowfield","userSuppliedId":"72e15ae6-1a00-44d8-b29c-b31e29fdfad8"},{"contactId":"contact-ea8d0cba2caa49d19cd660b0350a8329","dateCreated":"2017-09-22T22:51:58.000Z","email":"ktiev@free.fr","firstName":"Karoline","lastName":"Tie","userSuppliedId":"d0b74e68-cac8-4b66-aa45-6c51c7bb4256"},{"contactId":"contact-7ac4e9f2e45d4420a653f31b4d8dcb30","dateCreated":"2017-09-22T22:51:58.000Z","email":"msiggeryu@cdc.gov","firstName":"Marlane","lastName":"Siggery","userSuppliedId":"6381d466-9695-41ff-bca3-b9c5833687f5"},{"contactId":"contact-61c2d622d10a49fd9a65e6c752b8b4db","dateCreated":"2017-09-22T22:51:58.000Z","email":"ybartul5@sciencedirect.com","firstName":"Yelena","lastName":"Bartul","userSuppliedId":"7b1e79dc-b631-446b-86e4-c0f49d47e184"},{"contactId":"contact-e1a6dae5dde94b1b8d00628c18538a7f","dateCreated":"2017-09-22T22:51:57.000Z","email":"adebiasio4@google.co.uk","firstName":"Ame","lastName":"De Biasio","userSuppliedId":"8e95f50a-51e8-4cc1-8d04-4b198aa230a3"},{"contactId":"contact-8ffb6ed4014944a398351ed0c2837161","dateCreated":"2017-09-22T22:51:57.000Z","email":"svintons@msn.com","firstName":"Shandra","lastName":"Vinton","userSuppliedId":"a4faa390-66e6-4d4c-8e09-0fcc251cb426"},{"contactId":"contact-7fba2c36b35e497ba16ff6ebce9cc22e","dateCreated":"2017-09-22T22:51:57.000Z","email":"epaszakt@weather.com","firstName":"Emanuel","lastName":"Paszak","userSuppliedId":"73655895-db1f-44d6-85ef-fe308f314428"},{"contactId":"contact-7e0ec15b535b4d69bc43da2b86281fad","dateCreated":"2017-09-22T22:51:57.000Z","email":"rwressell3@opera.com","firstName":"Ray","lastName":"Wressell","userSuppliedId":"25d9445a-93bc-48ce-bcf3-7df0176ebe62"},{"contactId":"contact-7d4ad9f0c64c409998b3c4a4c29d2dab","dateCreated":"2017-09-22T22:51:56.000Z","email":"jsteutly2@si.edu","firstName":"Jaquenette","lastName":"Steutly","userSuppliedId":"8321db4c-7a7e-4cf6-ae73-1bd631426ef3"},{"contactId":"contact-196f4a841c92406d9c37722472a7514c","dateCreated":"2017-09-22T22:51:56.000Z","email":"adaggr@symantec.com","firstName":"Ambrosi","lastName":"Dagg","userSuppliedId":"16418c5e-4842-40b8-9f73-32d72eda4f47"},{"contactId":"contact-f67bed81407641c38ca411529bbff287","dateCreated":"2017-09-22T22:51:55.000Z","email":"abachelarq@t-online.de","firstName":"Augusto","lastName":"Bachelar","userSuppliedId":"3b8b2279-b15b-4b6d-9ed1-3a7b8ba6a6e2"},{"contactId":"contact-873eadc3867d4d50bea45bd6ed767bb2","dateCreated":"2017-09-22T22:51:55.000Z","email":"cgarms1@bizjournals.com","firstName":"Clovis","lastName":"Garms","userSuppliedId":"74142f06-3afe-44f8-8877-875588cbd68b"},{"contactId":"contact-83a691d81c67447395ccad9847538101","dateCreated":"2017-09-22T22:51:55.000Z","email":"spielep@cyberchimps.com","firstName":"Silvio","lastName":"Piele","userSuppliedId":"80d74d48-627f-46a2-83f2-8c4644620d05"},{"contactId":"contact-8cc071483a5742589a8b59b8149bacfc","dateCreated":"2017-09-22T22:51:54.000Z","email":"bmcpike0@msn.com","firstName":"Bartholomew","lastName":"McPike","userSuppliedId":"e687cfb9-0b42-4263-806a-dcca4a7f2617"},{"contactId":"contact-571103bb4e5d49b0b612a5f4aa5278c1","dateCreated":"2017-09-22T21:04:17.000Z","email":"tim@giftbit.com","firstName":null,"lastName":null,"userSuppliedId":"example-import-id-3"},{"contactId":"contact-26a0ac2e404049a8b9339379e120a734","dateCreated":"2017-09-22T21:04:16.000Z","email":null,"firstName":"tim","lastName":"jay","userSuppliedId":"example-import-id-2"},{"contactId":"contact-8db1847a344a42dfbe8a48f9fb6ee79a","dateCreated":"2017-09-22T21:04:12.000Z","email":null,"firstName":"tim","lastName":null,"userSuppliedId":"example-import-id-1"},{"contactId":"contact-0dbf54d91182451abf58c214c7527524","dateCreated":"2017-09-21T23:40:39.000Z","email":null,"firstName":null,"lastName":null,"userSuppliedId":"asdfasdf"},{"contactId":"contact-f622df5f9522442e97c3d3dca5b59ce5","dateCreated":"2017-09-21T23:17:48.000Z","email":"tim324q3@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"tim324q3@giftbit.com"},{"contactId":"contact-8b33ffba69274b7b9c08abd4c8d6d67d","dateCreated":"2017-09-21T23:17:47.000Z","email":"ti3m24q5@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"ti3m24q5@giftbit.com"},{"contactId":"contact-3a2b54df712c46e4b9192e5ecba63bf6","dateCreated":"2017-09-21T20:57:56.000Z","email":"tim233@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"tim233@giftbit.com"},{"contactId":"contact-ea7c5df41df64806b311d7f6818e3968","dateCreated":"2017-09-21T20:57:55.000Z","email":"tim235@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"tim235@giftbit.com"},{"contactId":"contact-eab3e55591ac4e0393266b11697ad402","dateCreated":"2017-09-21T20:33:48.000Z","email":"tim13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"tim13@giftbit.com"},{"contactId":"contact-3d183b88a9584d548b4729d69f5bfde7","dateCreated":"2017-09-21T20:33:47.000Z","email":"tim15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"tim15@giftbit.com"},{"contactId":"contact-e7e3ffd55d0141db83d97720f4d225c3","dateCreated":"2017-09-21T18:20:17.000Z","email":"timS223441E+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timS223441E+13@giftbit.com"},{"contactId":"contact-9c91129364704e04b20bc9307f95d494","dateCreated":"2017-09-21T18:20:16.000Z","email":"timS223441E+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timS223441E+15@giftbit.com"},{"contactId":"contact-6f2cafff2196431f866182dbf623a990","dateCreated":"2017-09-21T17:46:38.000Z","email":"timS2341E+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timS2341E+13@giftbit.com"},{"contactId":"contact-8d4fe0b5b1ab4fecb9c5dad9d1c4097b","dateCreated":"2017-09-21T17:46:37.000Z","email":"timS2341E+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timS2341E+15@giftbit.com"},{"contactId":"contact-35348dc5278341109b371db437b5e2de","dateCreated":"2017-09-21T17:38:10.000Z","email":"timS23a1E+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timS23a1E+13@giftbit.com"},{"contactId":"contact-f37bb11c7a044debaebff0e77ae7810f","dateCreated":"2017-09-21T17:38:09.000Z","email":"timS23a1E+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timS23a1E+15@giftbit.com"},{"contactId":"contact-7ddaa3de3abc46349756ccac5997d827","dateCreated":"2017-09-21T17:34:18.000Z","email":"timSwe1E+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSwe1E+13@giftbit.com"},{"contactId":"contact-39029827470246ec8aee09e6545f0b66","dateCreated":"2017-09-21T17:34:17.000Z","email":"timSwe1E+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSwe1E+15@giftbit.com"},{"contactId":"contact-717476b2c049466db657740078e7aa0c","dateCreated":"2017-09-21T01:06:48.000Z","email":"timSWWE+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSWWE+13@giftbit.com"},{"contactId":"contact-fda758a92a254895851c5fe26857f3ca","dateCreated":"2017-09-21T01:06:47.000Z","email":"timSWWE+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSWWE+15@giftbit.com"},{"contactId":"contact-e88f8b23288b41b88c9445b68426aee2","dateCreated":"2017-09-21T01:05:59.000Z","email":"timSerad+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSerad+13@giftbit.com"},{"contactId":"contact-60aed36fa87d4b3e97bb4256bd0ff00f","dateCreated":"2017-09-21T01:05:41.000Z","email":"timSerad+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSerad+15@giftbit.com"},{"contactId":"contact-0fba8e9339f04d7ab2ae5f76a3f671ed","dateCreated":"2017-09-21T01:05:00.000Z","email":"timSwer34+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSwer34+13@giftbit.com"},{"contactId":"contact-accb9a65f2444a31bb749bdac73d5525","dateCreated":"2017-09-21T01:04:33.000Z","email":"timSwer34+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSwer34+15@giftbit.com"},{"contactId":"contact-711118f0885b46f8806514defa308f43","dateCreated":"2017-09-21T01:03:32.000Z","email":"timSew34+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSew34+15@giftbit.com"},{"contactId":"contact-5daa0754aec54b1eb53cb11c964d423b","dateCreated":"2017-09-21T01:03:32.000Z","email":"timSew34+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSew34+13@giftbit.com"},{"contactId":"contact-d6ff510312094fd8b0fb5f11fddc4c5b","dateCreated":"2017-09-21T01:00:52.000Z","email":"timSew3F+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSew3F+13@giftbit.com"},{"contactId":"contact-9312a97721ba42d4a7e77071d676b576","dateCreated":"2017-09-21T01:00:52.000Z","email":"timSew3F+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSew3F+15@giftbit.com"},{"contactId":"contact-a99df1692ea2432f9ca38704bffb0729","dateCreated":"2017-09-21T00:19:19.000Z","email":"timSsad3F+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSsad3F+13@giftbit.com"},{"contactId":"contact-107bcbe2ea804f88949ccb01b9eb1787","dateCreated":"2017-09-21T00:19:19.000Z","email":"timSsad3F+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSsad3F+15@giftbit.com"},{"contactId":"contact-487063121ed448abbc33dbe89a0157d2","dateCreated":"2017-09-21T00:18:56.000Z","email":"timSsadfF+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSsadfF+13@giftbit.com"},{"contactId":"contact-2529c158ae964f36bf57b7598e4a7902","dateCreated":"2017-09-21T00:18:55.000Z","email":"timSsadfF+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSsadfF+15@giftbit.com"},{"contactId":"contact-573ed373fe204baca21af4afd811cdd6","dateCreated":"2017-09-21T00:11:47.000Z","email":"timSDF+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSDF+15@giftbit.com"},{"contactId":"contact-1fecb6cf67d8446585a09221ac5ff45c","dateCreated":"2017-09-21T00:11:47.000Z","email":"timSDF+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timSDF+13@giftbit.com"},{"contactId":"contact-acd604c108bc49a68bf1d6b85822f0e5","dateCreated":"2017-09-21T00:11:14.000Z","email":"timL+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timL+15@giftbit.com"},{"contactId":"contact-9823405c0dc74bb9bf39051f7c8c330a","dateCreated":"2017-09-21T00:11:14.000Z","email":"timL+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timL+13@giftbit.com"},{"contactId":"contact-c59464a428874823a428045546148e62","dateCreated":"2017-09-20T23:42:15.000Z","email":"timK+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timK+13@giftbit.com"},{"contactId":"contact-649a27548f454d1baabbd6b6cdb8a62f","dateCreated":"2017-09-20T23:42:14.000Z","email":"timK+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timK+15@giftbit.com"},{"contactId":"contact-a5f2590826c440a4be368703f60f4702","dateCreated":"2017-09-20T23:31:09.000Z","email":"timI+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timI+13@giftbit.com"},{"contactId":"contact-1556b651517042579711249a08f3dbbd","dateCreated":"2017-09-20T23:31:09.000Z","email":"timI+15@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timI+15@giftbit.com"},{"contactId":"contact-d07c3ab2f714479faa8b7ad63080f1dc","dateCreated":"2017-09-20T23:19:56.000Z","email":"timG+13@giftbit.com","firstName":"tim","lastName":"jay","userSuppliedId":"timG+13@giftbit.com"}],"pagination":{"count":100,"limit":100,"maxLimit":1000,"offset":0,"totalCount":5573}}


### Show Contact [GET /contacts/{contactId}]
+ Parameters
    + contactId (string, required) - The Lightrail Contact ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
            
    
+ Response 200
    + Attributes
        + contact (Contact)

    + Body
    
            {"contact":{"contactId":"contact-1f75ce37b57c4717b47aea9d8f79b79a","dateCreated":"2018-01-25T00:31:30.000Z","email":"alice@example.com","firstName":null,"lastName":null,"userSuppliedId":"create-contact-1"}}


### Create Contact [POST /contacts]
Creates a new Contact. 

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
            
    + Attributes 
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
        + email (string, optional) - The contact's email.
        + firstName (string, optional) - The contact's first name.
        + lastName (string, optional) - The contact's last name.
        
            
    + Body
            {"email":"alice@example.com","userSuppliedId":"create-contact-1"}

    
+ Response 200
    + Attributes 
        + contact (Contact)

    + Body
            {"contact":{"contactId":"contact-1f75ce37b57c4717b47aea9d8f79b79a","dateCreated":"2018-01-25T00:31:30.000Z","email":"alice@example.com","firstName":null,"lastName":null,"userSuppliedId":"create-contact-1"}}

### Update Contact [PATCH /contacts/{contactId}]
Updates a Contact.

---
+ Parameters
    + contactId (string, required) - The Lightrail Contact ID.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
            
    + Attributes
        + email (string, optional) 
        + firstName (string, optional)
        + lastName (string, optional) 
            
    + Body
    
            {
                "firstName": "Alice",
                "lastName": "Liddel"
            }
    
+ Response 200
    + Attributes 
        + contact (Contact)

    + Body
    
            {
                "contact":{
                    "contactId": "contact-83deaef84b804fb38ef92aea81ed134a",
                    "userSuppliedId": "314159265359",
                    "email": "alice@example.com",
                    "firstName": "Alice",
                    "lastName": "Liddel",
                    "dateCreated": "2018-01-15T21:51:24.000Z"
                }
            }


### Retrieve Account Cards or Gift Cards for Contact [GET /cards{?contactId}{?cardType}{?currency}]
Retrieve a paginated list of a Contact's Cards.

---
+ Parameters 
    + contactId (string, required) - The Lightrail Contact ID.
    + cardType (string, required) - `ACCOUNT_CARD`, `GIFT_CARD`.
    + currency (string, optional) - The three-character ISO-4217 currency. Only needed if the Contact has Account Cards in multiple currencies.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200
    + Attributes
        + cards (array[Card])
        + pagination (Pagination)

    + Body
    
            {
              "cards":[
                {
                    "cardId": "card-6bd0dee5efe047de9c2e3b11d11be97e",
                    "userSuppliedId": "alice-account-usd",
                    "contactId": "contact-83deaef84b804fb38ef92aea81ed134a",
                    "dateCreated": "2018-01-15T22:52:18.749Z",
                    "categories":[
                      {
                        "categoryId": "category-1b483e9c4e864a9fa9fe32b350ec85f9",
                        "key": "city",
                        "value": "seattle"
                      },
                      {
                        "categoryId": "category-e595f03510f14c389866c3f7ed12cfd7",
                        "key": "giftbit_order",
                        "value": "2018-01-15"
                      },
                      {
                        "categoryId": "category-fbbb512ccf564b198c15af55f83ba1ac",
                        "key": "giftbit_program",
                        "value": "program-account-USD-user-b3dc5abb7a754911a68bc0e96cb8f028"
                      }
                    ],
                    "cardType": "ACCOUNT_CARD",
                    "currency": "USD"
                }
              ],
              "pagination":{
                "count":1,
                "limit":100,
                "maxLimit":1000,
                "offset":0,
                "totalCount":1
              }
            }


## Simulate and Balance-Check [/cards/{cardId}/balance/]
Use these endpoints to simulate a Transaction and get the available balance of a Card in the context of a would-be Transaction. 
Depending on the context of your use-case you can do this either based on the `cardId` or the `fullcode`. 
Note that only Gift Cards have a `fullcode`.

---



### Simulate a Transaction and Balance-Check Based on Card ID [POST /cards/{cardId}/transactions/dryRun]
<a name="post-transaction-by-cardid-dryRun-anchor"></a>
Simulates creating a transaction against a Card based on its `cardId` and returns the would-be Transaction. Note that the returned Transaction object does not have a `transactionId` because it is merely a simulation and not an actual Transaction.

The `nsf` attribute determines the behaviour of this endpoint in the case of insufficient funds. If `nsf` is set to `true` (which is the default), it will return an error indicating insufficient funds. 
If `nsf` is set to `false`, the response will return a hypothetical drawdown Transaction object with the maximum value the Card can pay, i.e. its available balance. 

It is particularly important to provide the full context of the Transaction, i.e. its metadata, if your system uses Redemption Rules, since in that case the 
effective balance of a Card varies depending on the metadata of the Transaction.

---

+ Parameters
    + cardId (string, required) - The Lightrail Card ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + value (number) - A negative or positive integer indicating the value of the transaction in the smallest unit for the currency, e.g. cents for USD.
        + currency (required) - The three-character ISO-4217 currency.
        + nsf (boolean, optional) - whether to return an error in case of insufficient funds or return a best-effort Transaction.
        + metadata (Metadata, optional) - A key-value JSON object to store any additional information. The `giftbit_*` namespace for keys is reserved. Note Lightrail's [Redemption Rules](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/use-cases/redemption-rules.md) operate on Transaction metadata to determine whether a particular promotion can be spent. Example: `"metadata":{"checkout-cart":{"items":[{"id":"1"},{"id":"2"}]}}`.
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.

    + Body 
    
            {
              "userSuppliedId":"order-s3xx30",
              "value":-5500,
              "currency":"USD",
              "nsf": false,
              "metadata": {
                 "cart": {
                    "total": 25335,
                    "items": [
                      {
                        "id": "B000F34ZKS", 
                        "quantity": 1,
                        "unit_price": 20695,
                        "tags": ["gear", "outdoor", "clearance"]
                      },
                      {
                        "id": "B009L1MF7A", 
                        "quantity": 2,
                        "unit_price": 2320,
                        "tags": ["apparel", "outdoor"]
                      }
                    ]
                 }
              }
            }
    
+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body

            {
              "transaction":{
                "value":-250,
                "userSuppliedId":"order-s3xx30",
                "dateCreated":null,
                "transactionType":"DRAWDOWN",
                "transactionAccessMethod":"CARDID",
                "valueAvailableAfterTransaction":250,
                "giftbitUserId":"user-b3dc5abb7a754911a68bc0e96cb8f028",
                "cardId":"card-6bd0dee5efe047de9c2e3b11d11be97e",
                "currency":"USD",
                "cardType":"ACCOUNT_CARD",
                "transactionBreakdown":[
                  {
                    "value":-250,
                    "valueAvailableAfterTransaction":250,
                    "valueStoreId":"value-a9cc0df45bd04fb692f9f0bcba4c1bd3"
                  }
                ],
                "transactionId":null,
                "metadata":{
                  "cart":{
                    "total":25335,
                    "items":[
                      {
                        "quantity":1,
                        "id":"B000F34ZKS",
                        "unit_price":150,
                        "tags":[
                          "gear",
                          "outdoor",
                          "clearance"
                        ]
                      },
                      {
                        "quantity":2,
                        "id":"B009L1MF7A",
                        "unit_price":100,
                        "tags":[
                          "apparel",
                          "outdoor"
                        ]
                      }
                    ]
                  }
                }
              }
            }


### Simulate a Transaction and Balance-Check Based on Gift Code [POST /cards/{fullcode}/transactions/dryRun{?pin}]
<a name="post-transaction-by-code-dryRun-anchor"></a>
Simulates creating a transaction against a Gift Card based on its `fullcode` and returns the would-be Transaction. Note that the returned Transaction object does not have a `transactionId` because it is merely a simulation and not an actual Transaction.

The `nsf` attribute determines the behaviour of this endpoint in the case of insufficient funds. If `nsf` is set to `true` (which is the default), it will return an error indicating insufficient funds. 
If `nsf` is set to `false`, the response will return a hypothetical drawdown Transaction object with the maximum value the Card can pay, i.e. its available balance. 

It is particularly important to provide the full context of the Transaction, i.e. its metadata, if your system uses Redemption Rules, since in that case the 
effective balance of a Card varies depending on the metadata of the Transaction.

---

+ Parameters
    + fullcode (string, required) - The unique unguessable Gift Code.
    + pin (string, optional) - This is required if the fullcode has a pin.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + value (number) - A negative or positive integer indicating the value of the transaction in the smallest unit for the currency, e.g. cents for USD.
        + currency (required) - The three-character ISO-4217 currency.
        + nsf (boolean, optional) - whether to return an error in case of insufficient funds or return a best-effort Transaction.
        + metadata (Metadata, optional) - A key-value JSON object to store any additional information. The `giftbit_*` namespace for keys is reserved. Note Lightrail's [Redemption Rules](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/use-cases/redemption-rules.md) operate on Transaction metadata to determine whether a particular promotion can be spent. Example: `"metadata":{"checkout-cart":{"items":[{"id":"1"},{"id":"2"}]}}`.
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.

    + Body 
    
            {
              "userSuppliedId":"order-s3xx30",
              "value":-5500,
              "currency":"USD",
              "nsf": false,
              "metadata": {
                 "cart": {
                    "total": 25335,
                    "items": [
                      {
                        "id": "B000F34ZKS", 
                        "quantity": 1,
                        "unit_price": 20695,
                        "tags": ["gear", "outdoor", "clearance"]
                      },
                      {
                        "id": "B009L1MF7A", 
                        "quantity": 2,
                        "unit_price": 2320,
                        "tags": ["apparel", "outdoor"]
                      }
                    ]
                 }
              }
            }
    
+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body

            {
              "transaction":{
                  "value": -5000,
                  "userSuppliedId": "order-s3xx30",
                  "dateCreated": null,
                  "transactionType": "DRAWDOWN",
                  "transactionAccessMethod": "RAWCODE",
                  "valueAvailableAfterTransaction": 0,
                  "giftbitUserId": "user-7cxx2c",
                  "cardId": "card-dcxx37",
                  "currency": "USD",
                  "transactionBreakdown":[
                    {
                      "value": -5000,
                      "valueAvailableAfterTransaction": 0,
                      "valueStoreId": "value-66xxf2"
                    }
                  ],
                  "transactionId": null,
                  "metadata":{
                    "cart":{
                        "total": 25335,
                        "items": [
                          {
                              "quantity": 1,
                              "id": "B000F34ZKS",
                              "unit_price": 20695,
                              "tags":["gear", "outdoor", "clearance"]
                          },
                          {
                              "quantity": 2,
                              "id": "B009L1MF7A",
                              "unit_price": 2320,
                              "tags":["apparel", "outdoor"]
                          }
                        ]
                    }
                  },
                  "codeLastFour": "YNJC"
              }
            }


### Get Card Details by Card ID [GET /cards/{cardId}/details{?asAtDate}]
Retrieve a Card's details based on its `cardId`. 
The response includes the Value Stores (principal or attached promotions) as well as any restrictions on any of the Value Stores.

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + asAtDate (string, optional) - The date and time at which the information should be retrieved.
+ Request (application/json)
    + Headers

            Authorization: Bearer <API_KEY>

+ Response 200
    + Attributes (CardDetails)

    + Body

            {  
              "details":{  
                "valueStores":[  
                  {  
                    "valueStoreType":"PRINCIPAL",
                    "value":33301,
                    "state":"ACTIVE",
                    "expires":null,
                    "startDate":null,
                    "programId":"program-1dxxa9",
                    "valueStoreId":"value-2fxxf2",
                    "restrictions":[]
                  },
                  {  
                    "valueStoreType":"ATTACHED",
                    "value":500,
                    "state":"ACTIVE",
                    "expires":null,
                    "startDate":null,
                    "programId":"program-c7xxe6",
                    "valueStoreId":"value-79xxee",
                    "restrictions":[  
                      "If your cart total is at least $100."
                    ]
                  }
                ],
                "currency":"USD",
                "cardType":"GIFT_CARD",
                "asAtDate":"2017-09-14T18:09:09.520Z",
                "cardId":"card-6dxx89"
              }
            }

### Get Card Details by Gift Code [GET /codes/{fullcode}/details{?asAtDate}{?pin}]
Retrieve a Gift Card's details based on its `fullcode`. 
The response includes the Value Stores (principal or attached promotions) as well as any restrictions on any of the Value Stores.

---
+ Parameters
    + fullcode (string, required) - The unique unguessable Gift Code.
    + pin (string, optional) - This is required if the fullcode has a pin.
    + asAtDate (string, optional) - The date and time at which the information should be retrieved.

+ Request (application/json)
    + Headers

            Authorization: Bearer <API_KEY>

+ Response 200
    + Attributes (CardDetails)

    + Body

            {  
              "details":{  
                "valueStores":[  
                  {  
                    "valueStoreType":"PRINCIPAL",
                    "value":33301,
                    "state":"ACTIVE",
                    "expires":null,
                    "startDate":null,
                    "programId":"program-1dxxa9",
                    "valueStoreId":"value-2fxxf2",
                    "restrictions":[]
                  },
                  {  
                    "valueStoreType":"ATTACHED",
                    "value":500,
                    "state":"ACTIVE",
                    "expires":null,
                    "startDate":null,
                    "programId":"program-c7xxe6",
                    "valueStoreId":"value-79xxee",
                    "restrictions":[  
                      "If your cart total is at least $100."
                    ]
                  }
                ],
                "currency":"USD",
                "cardType":"GIFT_CARD",
                "asAtDate":"2017-09-14T18:09:09.520Z",
                "cardId":"card-6dxx89"
              }
            }

### Get Balance by Card ID (Deprecated) [GET /cards/{cardId}/balance{?asAtDate}]
Retrieve a Card's balance based on its `cardId`.

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + asAtDate (string, optional) - The date and time at which the information should be retrieved.
+ Request (application/json)
    + Headers

            Authorization: Bearer <API_KEY>

+ Response 200
    + Attributes (Balance)

    + Body

            {
                "balance":{
                    "principal":{
                        "currentValue": 150,
                        "state": "ACTIVE",
                        "expires": null,
                        "startDate": null,
                        "programId": "program-dexx72",
                        "valueStoreId": "value-18xx79"
                    },
                    "attached":[
                    ],
                    "currency": "USD",
                    "cardType":"GIFT_CARD",
                    "balanceDate": "2017-06-05T17:11:36.999Z"
                }
            }

### Get Balance by Gift Code (Deprecated) [GET /codes/{fullcode}/card/balance{?asAtDate}{?pin}]
Retrieve a Card's balance using the Gift Card's `fullcode`, also referred to as Gift Code.

---
+ Parameters
    + fullcode (string, required) - The unique unguessable Gift Code.
    + pin (string, optional) - This is required if the fullcode has a pin.
    + asAtDate (string, optional) - The date and time at which the information should be retrieved.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200
    + Attributes (Balance)

    + Body

            {
                "balance":{
                    "cardId": "card-6dxxx89",
                    "principal":{
                        "currentValue": 150,
                        "state": "ACTIVE",
                        "expires": null,
                        "startDate": null,
                        "programId": "program-dexx72",
                        "valueStoreId": "value-18xx79"
                    },
                    "attached":[],
                    "currency": "USD",
                    "cardType":"GIFT_CARD",
                    "balanceDate": "2017-06-05T17:11:36.999Z"
                }
            }

## Transactions [/cards/{cardId}/transactions]
Use these endpoints to create and retrieve Transactions on Cards, based on their `cardId` or `fullcode`. 
Note that only Gift Cards have a `fullcode`.


---
<a name="post-transaction-by-cardid-anchor"></a>

### Create Transaction Based on Card ID [POST /cards/{cardId}/transactions]
Creates a transaction against a Card based on its `cardId`.
Transactions can be created as pending which locks the value required for the Transaction until it is either captured or voided. 

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + value (number) - A negative or positive integer indicating the value of the transaction in the smallest unit for the currency, e.g. cents for USD.
        + currency (required) - The three-character ISO-4217 currency.
        + metadata (Metadata, optional) - A key-value JSON object to store any additional information. The `giftbit_*` namespace for keys is reserved. Note Lightrail's [Redemption Rules](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/use-cases/redemption-rules.md) operate on Transaction metadata to determine whether a particular promotion can be spent. Example: `"metadata":{"checkout-cart":{"items":[{"id":"1"},{"id":"2"}]}}`.
        + pending (boolean, optional) - If `true`, the transaction will be created as pending, i.e. the value will be locked until it is either captured or voided. The default is `false`.
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.        
        
    + Body 
        
        {"currency":"USD","metadata":{"cart":{"items":[{"id":"B000F34ZKS","quantity":1,"tags":["gear","outdoor","clearance"],"unit_price":150},{"id":"B009L1MF7A","quantity":2,"tags":["apparel","outdoor"],"unit_price":100}],"total":250}},"nsf":false,"userSuppliedId":"order-s3xx30","value":-250}
    
            
    
+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body

            {"card":{"cardId":"card-e107dc36c3f942e6958303bde33c7baf","cardType":"GIFT_CARD","categories":[{"categoryId":"category-1b2460a709cb4ce48ef2f2d3db93a86c","key":"giftbit_order","value":"2018-01-25"}],"contactId":null,"currency":"USD","dateCreated":"2018-01-25T00:41:30.602Z","userSuppliedId":"order-s3xx30"}}



### Create Transaction Based on Gift Code [POST /codes/{fullcode}/transactions{?pin}] 

<a name="post-transaction-by-fullcode-anchor"></a>

Creates a drawdown transaction against a Gift Card based on its `fullcode`. 
Since this endpoint is designed to facilitate redemption, it only allows drawdown transactions, so, the `value` must be a negative integer. 

If the Transactions is created as pending, the value will be locked until it is either captured or voided.
Note that there are no Lightrail endpoints for capturing or voiding a pending transaction based on `fullcode`, 
so, when creating a pending Transaction you need to save the `cardId` from the response to this call in order to eventually capture or void it. 


---
+ Parameters
    + fullcode (string, required) - The unique unguessable Gift Code.
    + pin (string, optional) - This is required if the fullcode has a pin.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + value (number) - A negative integer indicating the value of the transaction in the smallest unit for the currency, e.g. cents for USD.
        + currency (required) - The three-character ISO-4217 currency.
        + metadata (Metadata, optional) - A key-value JSON object to store any additional information. The `giftbit_*` namespace for keys is reserved. Note Lightrail's [Redemption Rules](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/use-cases/redemption-rules.md) operate on Transaction metadata to determine whether a particular promotion can be spent. Example: `"metadata":{"checkout-cart":{"items":[{"id":"1"},{"id":"2"}]}}`.
        + pending (boolean, optional) - If `true`, the transaction will be created as pending, i.e. the value will be locked until it is either captured or voided. The default is `false`.
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.        
        
    + Body 
    
            {
              "userSuppliedId":"example2",
              "value":-500,
              "currency":"USD",
                "metadata": {
                  "cart": {
                    "total": 25335
                  }
                }
            }
    
+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body

            {
              "transaction":{
                "transactionId":"transaction-62xx70",
                "value":-500,
                "userSuppliedId":"exmaple2",
                "dateCreated":"2017-07-31T18:38:02.449Z",
                "transactionType":"DRAWDOWN",
                "transactionAccessMethod":"RAWCODE",
                "valueAvailableAfterTransaction":1500,
                "giftbitUserId":"user-1dxx32",
                "cardId":"card-76xxab",
                "currency":"USD",
                "metadata": {
                  "cart": {
                    "total": 25335
                  }
                }
              }
            }

### Capture Pending Transaction [POST /cards/{cardId}/transactions/{transactionId}/capture]
Capture a pending Transaction, thereby collecting the value withheld by the pending Transaction.

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + transactionId (string, required) - The `transactionId` of the pending Transaction.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
            
    + Attributes
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
        + metadata (Metadata, optional) - A key-value JSON object to store any additional information. The `giftbit_*` namespace for keys is reserved. Note Lightrail's [Redemption Rules](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/use-cases/redemption-rules.md) operate on Transaction metadata to determine whether a particular promotion can be spent. Example: `"metadata":{"checkout-cart":{"items":[{"id":"1"},{"id":"2"}]}}`.

    
    + Body 
        
            {
              "userSuppliedId":"transaction-90xxf6-capture",
              "metadata": {
                  "cart": {
                    "total": 25335
                  }
              }
            }

+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body

            {
              "transaction":{
                "transactionId":"transaction-38xx52",
                "value":-50,
                "userSuppliedId":"transaction-90xxf6-capture",
                "dateCreated":"2017-07-31T18:50:25.357Z",
                "transactionType":"DRAWDOWN",
                "transactionAccessMethod":"CARDID",
                "valueAvailableAfterTransaction":1349,
                "giftbitUserId":"user-1dxx32",
                "cardId":"card-76xxab",
                "currency":"USD",
                "parentTransactionId":"transaction-90xxf6",
                "metadata":{
                    "cart": {
                        "total": 25335
                    },
                    "giftbit_initial_transaction_id":"transaction-90xxf6"
                }
              }
            }


### Void Pending Transaction [POST /cards/{cardId}/transactions/{transactionId}/void]
Voids a pending Transaction by unlocking the value withheld by the pending Transaction.

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + transactionId (string, required) - The Lightrail Transaction ID. Must be a pending Transaction.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
            
    + Attributes
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client. 
        + metadata (Metadata, optional) - A key-value JSON object to store any additional information. The `giftbit_*` namespace for keys is reserved.
    
    + Body 
            
            {
              "userSuppliedId":"transaction-fbxx5a-void",
              "metadata": {
                 "reason": "timeout."
              }                            
            }
    
+ Response 200
    + Attributes
        + transaction (Transaction)
        
    + Body

            {
                "transaction":{
                    "transactionId":"transaction-7dxx3b",
                    "value":50,
                    "userSuppliedId":"transaction-fbxx5a-void",
                    "dateCreated":"2017-07-31T18:54:58.141Z",
                    "transactionType":"PENDING_VOID",
                    "transactionAccessMethod":"CARDID",
                    "valueAvailableAfterTransaction":1299,
                    "giftbitUserId":"user-1dxx32",
                    "cardId":"card-76xxab",
                    "currency":"USD",
                    "parentTransactionId":"transaction-fbxx5a",
                    "metadata":{
                      "giftbit_initial_transaction_id":"transaction-fbxx5a"
                    }
                }
            }


### Refund Transaction [POST /cards/{cardId}/transactions/{transactionId}/refund]
Refund a Transaction by reversing its effect. 

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + transactionId (string, required) - The Lightrail Transaction ID. Must be an existing Transaction with transactionType `DRAWDOWN`.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
            
    + Attributes
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
        + metadata (Metadata, optional) - A key-value JSON object to store any additional information. The `giftbit_*` namespace for keys is reserved.

    
    + Body 
            
            {
              "userSuppliedId":"transaction-90xxf6-refund",
              "metadata": {
                  "reason": "canceled order."
              }              
            }
    
+ Response 200
    + Attributes
        + transaction (Transaction)
        
    + Body

            {
              "transaction":{
                "transactionId":"transaction-77xx34",
                "value":50,
                "userSuppliedId":"transaction-9exxa3-reverse",
                "dateCreated":"2017-07-31T18:57:44.844Z",
                "transactionType":"DRAWDOWN_REFUND",
                "transactionAccessMethod":"CARDID",
                "valueAvailableAfterTransaction":1299,
                "giftbitUserId":"user-1dxx32",
                "cardId":"card-76xxab",
                "currency":"USD",
                "parentTransactionId":"transaction-9exxa3",
                "metadata":{
                  "giftbit_initial_transaction_id":"transaction-9exxa3"
                }
              }
            }
            


### List Card Transactions Based on Card ID [GET /cards/{cardId}/transactions{?userSuppliedId}{?transactionType}{?limit}{?offset}]
Retrieve a paginated list of a Card's Transactions based on the Card ID.

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + userSuppliedId (string, optional) - return the transaction with the specific `userSuppliedId`. Note that since `userSuppliedId`s are unique, this guarantees a unique transaction in the response if it exists.
    + transactionType (string, optional) - return only transactions of a specific type.
    + limit (number, optional) - For pagination. The maximum number of results to return at once. 
      + Default: 100
    + offset (number, optional) - For pagination. The offset of the first results in the total results. 
      + Default: 0
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200
    + Attributes
        + transactions (array[Transaction])
        + pagination (Pagination)

    + Body
            
            {
              "transactions":[
                {
                  "value":-250,
                  "userSuppliedId":"order-s3xx30",
                  "dateCreated":"2018-01-15T23:22:27.185Z",
                  "transactionType":"DRAWDOWN",
                  "transactionAccessMethod":"CARDID",
                  "valueAvailableAfterTransaction":250,
                  "giftbitUserId":"user-b3dc5abb7a754911a68bc0e96cb8f028",
                  "cardId":"card-6bd0dee5efe047de9c2e3b11d11be97e",
                  "currency":"USD",
                  "cardType":"ACCOUNT_CARD",
                  "transactionBreakdown":[
                    {
                      "value":-250,
                      "valueAvailableAfterTransaction":250,
                      "valueStoreId":"value-a9cc0df45bd04fb692f9f0bcba4c1bd3"
                    }
                  ],
                  "transactionId":"transaction-a6266e574c574dff905493f04bc0b818",
                  "metadata":{
                    "cart":{
                      "total":25335,
                      "items":[
                        {
                          "quantity":1,
                          "id":"B000F34ZKS",
                          "unit_price":150,
                          "tags":[
                            "gear",
                            "outdoor",
                            "clearance"
                          ]
                        },
                        {
                          "quantity":2,
                          "id":"B009L1MF7A",
                          "unit_price":100,
                          "tags":[
                            "apparel",
                            "outdoor"
                          ]
                        }
                      ]
                    }
                  }
                },
                {
                  "value":500,
                  "userSuppliedId":"unfreeze-1",
                  "dateCreated":"2018-01-15T23:17:35.863Z",
                  "transactionType":"UNFREEZE",
                  "transactionAccessMethod":"CARDID",
                  "valueAvailableAfterTransaction":500,
                  "giftbitUserId":"user-b3dc5abb7a754911a68bc0e96cb8f028",
                  "cardId":"card-6bd0dee5efe047de9c2e3b11d11be97e",
                  "currency":"USD",
                  "cardType":"ACCOUNT_CARD",
                  "transactionBreakdown":[
                    {
                      "value":500,
                      "valueAvailableAfterTransaction":500,
                      "valueStoreId":"value-a9cc0df45bd04fb692f9f0bcba4c1bd3"
                    }
                  ],
                  "transactionId":"transaction-500aadddee694782b5086367eaf351af"
                },
                {
                  "value":-500,
                  "userSuppliedId":"freeze-1",
                  "dateCreated":"2018-01-15T23:16:37.955Z",
                  "transactionType":"FREEZE",
                  "transactionAccessMethod":"CARDID",
                  "valueAvailableAfterTransaction":0,
                  "giftbitUserId":"user-b3dc5abb7a754911a68bc0e96cb8f028",
                  "cardId":"card-6bd0dee5efe047de9c2e3b11d11be97e",
                  "currency":"USD",
                  "cardType":"ACCOUNT_CARD",
                  "transactionBreakdown":[
                    {
                      "value":-500,
                      "valueAvailableAfterTransaction":0,
                      "valueStoreId":"value-a9cc0df45bd04fb692f9f0bcba4c1bd3"
                    }
                  ],
                  "transactionId":"transaction-4fe35a77bebc492e94559afebf74c6b2"
                },
                {
                  "value":500,
                  "userSuppliedId":"alice-account-usd",
                  "dateCreated":"2018-01-15T22:52:19.129Z",
                  "transactionType":"INITIAL_VALUE",
                  "transactionAccessMethod":"CARDID",
                  "valueAvailableAfterTransaction":500,
                  "giftbitUserId":"user-b3dc5abb7a754911a68bc0e96cb8f028",
                  "cardId":"card-6bd0dee5efe047de9c2e3b11d11be97e",
                  "currency":"USD",
                  "cardType":"ACCOUNT_CARD",
                  "transactionBreakdown":[
                    {
                      "value":500,
                      "valueAvailableAfterTransaction":500,
                      "valueStoreId":"value-a9cc0df45bd04fb692f9f0bcba4c1bd3"
                    }
                  ],
                  "transactionId":"transaction-24e197166f6744bba2b9fb34fff03320"
                }
              ],
              "pagination":{
                "count":4,
                "limit":100,
                "maxLimit":1000,
                "offset":0,
                "totalCount":4
              }
            }

### List Card Transactions Based on Gift Code [GET /codes/{fullcode}/transactions{?pin}{?userSuppliedId}{?transactionType}{?limit}{?offset}]
Retrieve a paginated list of a Card's Transactions based on the Gift Card's `fullcode`.

---
+ Parameters
    + fullcode (string, required) - The unique unguessable Gift Code.
    + pin (string, optional) - This is required if the fullcode has a pin.
    + userSuppliedId (string, optional) - return the transaction with the specific `userSuppliedId`. Note that since `userSuppliedId`s are unique, this guarantees a unique transaction in the response if it exists.
    + transactionType (string, optional) - return only transactions of a specific type.
    + limit (number, optional) - For pagination. The maximum number of results to return at once. 
      + Default: 100
    + offset (number, optional) - For pagination. The offset of the first results in the total results. 
      + Default: 0

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200
    + Attributes
        + transactions (array[Transaction])
        + pagination (Pagination)

    + Body

            {
              "transactions":[
                {
                  "transactionId":"transaction-e0xxf5",
                  "value":-599,
                  "userSuppliedId":"tx10",
                  "dateCreated":"2017-07-28T21:21:10.009Z",
                  "transactionType":"DRAWDOWN",
                  "transactionAccessMethod":"CARDID",
                  "valueAvailableAfterTransaction":1401,
                  "giftbitUserId":"user-1dxx32",
                  "cardId":"card-76xxab",
                  "currency":"USD",
                  "metadata":{
                    "giftbit_override_dateCreated":"2017-07-28T21:21:10.009Z"
                  }
                },
                {
                  "transactionId":"transaction-00xxa5",
                  "value":2000,
                  "userSuppliedId":"anonymous-giftcard10",
                  "dateCreated":"2017-07-13T21:21:00.601Z",
                  "transactionType":"INITIAL_VALUE",
                  "transactionAccessMethod":"CARDID",
                  "valueAvailableAfterTransaction":2000,
                  "giftbitUserId":"user-1dxx32",
                  "cardId":"card-76xxab",
                  "currency":"USD",                  
                }
              ],
              "pagination":{
                "count":2,
                "limit":100,
                "maxLimit":1000,
                "offset":0,
                "totalCount":2
              }
            }



### Show Transaction Based on Card ID [GET /cards/{cardId}/transactions/{transactionId}]
Retrieve a particular Transaction by its ID based on the `cardId`.

---

+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + transactionId (string, required) - The Lightrail Transaction ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body

            { 
                "transaction": {
                    "transactionId":"transaction-62xx70",
                    "value":-500,
                    "userSuppliedId":"example2",
                    "dateCreated":"2017-07-31T18:38:02.449Z",
                    "transactionType":"DRAWDOWN",
                    "transactionAccessMethod":"CARDID",
                    "valueAvailableAfterTransaction":1500,
                    "giftbitUserId":"user-1dxx32",
                    "cardId":"card-76xxab",
                    "currency":"USD",
                    "metadata": {
                      "cart": {
                        "total": 25335
                      }
                    }
                }
            }




### Show Transaction Based on Gift Code [GET /codes/{fullcode}/transactions/{transactionId}{?pin}]
Retrieves a particular Transaction by its ID based on the `fullcode`.

---
+ Parameters
    + transactionId (string, required) - The Lightrail Transaction ID.
    + fullcode (string, required) - The unique unguessable Gift Code.
    + pin (string, optional) - This is required if the fullcode has a pin.
    

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200
    + Attributes
        + transaction (Transaction)
        
    + Body 
    
            {
                "transactionId": "transaction-95xx1d",
                "value": -15875,
                "userSuppliedId": "11xx62-capture",
                "dateCreated": "2017-08-10T00:08:54.697Z",
                "transactionType": "DRAWDOWN",
                "transactionAccessMethod": "CARDID",
                "valueAvailableAfterTransaction": 0,
                "giftbitUserId": "user-08xx8e",
                "cardId": "card-6dxx89",
                "currency": "USD",
                "parentTransactionId": "transaction-a6xx9d",
                "metadata":{
                    "giftbit_initial_transaction_id": "transaction-a6xx9d"
                }
            }




## ValueStores: Managing Promotions [/cards/{cardId}/valueStores/]
Use these endpoints for creating and managing Promotions.

---
### List ValueStores [GET /cards/{cardId}/valueStores{?limit}{?offset}]
Retrieve a paginated list of a Card's ValueStores.

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + limit (number, optional) - For pagination. The maximum number of results to return at once. 
      + Default: 100
    + offset (number, optional) - For pagination. The offset of the first results in the total results. 
      + Default: 0
        

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200
    + Attributes
        + valueStores (array[ValueStore])
        + pagination (Pagination)

    + Body

            {
                "valueStores":[
                {
                    "cardId": "card-99xx65",
                    "valueStoreId": "value-0fxx04",
                    "valueStoreType": "PRINCIPAL",
                    "currency": "XXX",
                    "dateCreated": "2017-06-05T15:39:25.392Z",
                    "programId": "program-dexx72"
                }
                ],
                "pagination":{
                "count": 1,
                "limit": 100,
                "maxLimit": 1000,
                "offset": 0,
                "totalCount": 1
                }          
            }


### Show ValueStore [GET /cards/{cardId}/valueStores/{valueStoreId}]
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + valueStoreId (string, required) - The Lightrail ValueStore ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    
+ Response 200
    + valueStore (ValueStore)

    + Body

            {
                "valueStore":{
                    "cardId": "card-99xx65",
                    "valueStoreId": "value-0fxx04",
                    "valueStoreType": "PRINCIPAL",
                    "currency": "XXX",
                    "dateCreated": "2017-06-05T15:39:25.392Z",
                    "programId": "program-dexx72"
                }
            }


### Add ValueStore [POST /cards/{cardId}/valueStores]
Adds a ValueStore from a Promotion Program to a Card. 

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
        + currency (string, required) - The three-character ISO-4217 currency.
        + programId (string, required) - The unique id of the Promotion Program. Note the Program's `ValueStoreType` must be of type `ATTACHED`.
        + expires (string, optional) - Defaults to lifespan set by program.
        + startDate (string, optional) - The date for which the ValueStore will become usable.
        + initialValue (number, optional) - The initial value of the ValueStore.
        
    + Body 
    
            {
                "userSuppliedId":"promo1",
                "currency": "XXX",
                "programId":"program-d0xx04",
                "initialValue":150
            }
    
+ Response 200
    + Attributes
        + valueStore (ValueStore)

    + Body

            {
                "valueStore":{
                    "cardId": "card-99xx65",
                    "valueStoreId": "value-80xx82",
                    "valueStoreType": "ATTACHED",
                    "currency": "XXX",
                    "dateCreated": "2017-06-05T16:14:58.314Z",
                    "programId": "program-d0xx04",
                    "expires": "2017-06-13T06:59:59.000Z"
                }   
            }


### Freeze ValueStore [POST /cards/{cardId}/valueStores/{valueStoreId}/freeze]
Freeze a Card's ValueStore, preventing all transactions against that ValueStore until unfrozen. 

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + valueStoreId (string, required) - The Lightrail ValueStore ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
        
    + Body 
    
            {
                "userSuppliedId":"case-320"
            }
    
+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body

            {
                "transaction":{
                    "transactionId": "transaction-3fxxe1",
                    "value": -50,
                    "userSuppliedId": "case-320",
                    "dateCreated": "2017-06-05T16:36:56.321Z",
                    "transactionType": "FREEZE",
                    "transactionAccessMethod": "CARDID",
                    "valueAvailableAfterTransaction": 0,
                    "giftbitUserId": "user-50xx93",
                    "codeLastFour": "NKNA",
                    "cardId": "card-fbxxda",
                    "currency": "XXX"
                }
            }


### Unfreeze ValueStore [POST /cards/{cardId}/valueStores/{valueStoreId}/unfreeze]
Unfreeze a Card's frozen ValueStore, re-enabling the creation of transactions against that ValueStore.

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + valueStoreId (string, required) - The Lightrail ValueStore ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
        
    + Body 
    
            {
                "userSuppliedId":"case-320-resolved"
            }
    
+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body

            {
                "transaction":{
                    "transactionId": "transaction-f7xx82",
                    "value": 50,
                    "userSuppliedId": "ccase-320-resolved",
                    "dateCreated": "2017-06-05T16:37:57.218Z",
                    "transactionType": "UNFREEZE",
                    "transactionAccessMethod": "CARDID",
                    "valueAvailableAfterTransaction": 50,
                    "giftbitUserId": "user-50xx93",
                    "codeLastFour": "NKNA",
                    "cardId": "card-fbxxda",
                    "currency": "XXX"
                }
            }


### Cancel ValueStore [POST /cards/{cardId}/valueStores/{valueStoreId}/cancel]
Permanently cancels a Card's ValueStore.

---
+ Parameters
    + cardId (string, required) - The Lightrail Card ID.
    + valueStoreId (string, required) - The Lightrail ValueStore ID.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
        
    + Body 
    
            {
                "userSuppliedId":"case-122"
            }
    
+ Response 200
    + Attributes
        + transaction (Transaction)

    + Body

            {
                "transaction":{
                    "transactionId": "transaction-7fxx89",
                    "value": -50,
                    "userSuppliedId": "case-122",
                    "dateCreated": "2017-06-05T16:39:06.679Z",
                    "transactionType": "CANCELLATION",
                    "transactionAccessMethod": "CARDID",
                    "valueAvailableAfterTransaction": 0,
                    "giftbitUserId": "user-50xx93",
                    "codeLastFour": "NKNA",
                    "cardId": "card-fbxxda",
                    "currency": "XXX"
                }
            }




## Programs [/programs/]
Use this endpoint cto retrieve your existing Programs.

---
<a name="get-programs-anchor"></a>

### List Programs [GET /programs{?limit}{?offset}]
Retrieves a paginated list of all Lightrail Programs belonging to the user. 

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Parameters
    + limit (number, optional) - For pagination. The maximum number of results to return at once. 
      + Default: 100
    + offset (number, optional) - For pagination. The offset of the first results in the total results. 
      + Default: 0
        
+ Response 200

    + Body

            {
                "programs":[
                    {
                      "programId": "program-ccxx45",
                      "userSuppliedId": "74xxdf",
                      "name": "Short-Lived Promo",
                      "active": true,
                      "currency": "USD",
                      "dateCreated": "2017-07-04T21:12:09.000Z",
                      "programExpiresDate": null,
                      "programStartDate": "2017-07-04T21:11:33.000Z",
                      "codeActivePeriodInDays": 7,
                      "codeValueMin": 1000,
                      "codeValueMax": 2000,
                      "fixedCodeValues": null,
                      "codeEngine": "SIMPLE_STORED_VALUE",
                      "codeConfig": "DEFAULT",
                      "valueStoreType": "ATTACHED",
                      "metadata": null,
                      "timeZone": "PST",
                      "cardType": null
                    },
                    {
                      "programId": "program-1dxxa9",
                      "userSuppliedId": "3cxxff",
                      "name": "USD Program",
                      "active": true,
                      "currency": "USD",
                      "dateCreated": "2017-07-01T14:34:52.000Z",
                      "programExpiresDate": null,
                      "programStartDate": "2017-07-01T14:33:43.000Z",
                      "codeActivePeriodInDays": null,
                      "codeValueMin": 500,
                      "codeValueMax": 10000,
                      "fixedCodeValues": null,
                      "codeEngine": "SIMPLE_STORED_VALUE",
                      "codeConfig": "DEFAULT",
                      "valueStoreType": "PRINCIPAL",
                      "metadata": null,
                      "timeZone": "PST",
                      "cardType": null
                    }
                ],
                "pagination":{
                    "count": 2,
                    "limit": 100,
                    "maxLimit": 1000,
                    "offset": 0,
                    "totalCount": 2
                }
            }


# Data Structures

## Card (object)
+ cardId (string) - The Lightrail Card ID.
+ userSuppliedId (string) - Endpoint-unique idempotency ID provided by the client.
+ contactId (string) - Lightrail assigned Contact identifier.
+ dateCreated (string) - Lightrail system time of creation in ISO-8601 format.
+ categories (Category) - A key-value object to store additional information about the Card. For example: `"categories": {"city": "san francisco", "special": "earlybird"}` 
+ cardType (string) - `ACCOUNT_CARD`, `GIFT_CARD`.
+ currency (string) - The three-character ISO-4217 currency.

## CardDetails (object)
+ currency (string) - The three-character ISO-4217 currency.
+ cardType (string) - `ACCOUNT_CARD`, `GIFT_CARD`
+ cardId (string) - The Lightrail Card ID.
+ asAtDate (string, optional) - The date and time at which the information should be retrieved.
+ valueStores (array[ValueStoreDetails]) 


## ValueStore (object)
+ cardId (string) - The Lightrail Card ID.
+ valueStoreId (string) - The Lightrail ValueStore ID.
+ valueStoreType (string) - `PRINCIPAL`, `ATTACHED`
+ currency (string) - The three-character ISO-4217 currency.
+ dateCreated (string) - Lightrail system time of the creation in ISO-8601 format.
+ programId (string) - The Lightrail Program ID.
+ expires (string) - The date when the ValueStore expires in ISO-8601 format.
+ startDate (string, optional) - The date for which the ValueStore will become usable.

## Fullcode (object)
+ code (string, required) - The unique unguessable Gift Code.
+ pin (string, optional) - Card Programs can be configured to generate a pin to be used with the code.

## Transaction (object)
+ transactionId (string) - The Lightrail Transaction ID.
+ value (number) - A negative or positive integer indicating the value of the transaction in the smallest unit for the currency, e.g. cents for USD.
+ userSuppliedId (string) - Endpoint-unique idempotency ID provided by the client.
+ dateCreated (string) - Lightrail system time of the creation in ISO-8601 format.
+ transactionType (string) - The type of the Transaction: `DRAWDOWN, FUND, INITIAL_VALUE, CANCELLATION, INACTIVATE, ACTIVATE, FREEZE, UNFREEZE, PENDING_CREATE, PENDING_VOID, PENDING_CAPTURE, DRAWDOWN_REFUND`.
+ transactionAccessMethod (string) - Indicates how the transaction was created. Either through the cardId or the fullcode. Possible values: ["CARDID", "RAWCODE"].
+ parentTransactionId (string) - Indicates the ID of the original Transaction for a void, capture, or refund Transaction.
+ valueAvailableAfterTransaction (number) - Deprecated. Use `transactionBreakdown`.  
+ giftbitUserId (string) - Deprecated.  
+ cardId (string) - The Lightrail Card ID.
+ currency (string) - The three-character ISO-4217 currency.
+ transactionBreakdown (array[TransactionValue]) - The detailed breakdown of Value Stores used to extract the funds for this Transaction and their share.
+ metadata (object) - A key-value JSON object to store any additional information. The `giftbit_*` namespace for keys is reserved. Note Lightrail's [Redemption Rules](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/use-cases/redemption-rules.md) operate on Transaction metadata to determine whether a particular promotion can be spent. Example: `"metadata":{"checkout-cart":{"items":[{"id":"1"},{"id":"2"}]}}`.

## TransactionValue (object)
+ value (number) - A negative or positive integer indicating the value of the transaction in the smallest unit for the currency, e.g. cents for USD.
+ valueAvailableAfterTransaction (number) - Indicates the value available on the ValueStore after the Transaction. 
+ valueStoreId (string, required) - The Lightrail ValueStore ID.

## Pagination (object)
+ count (number) - The number of results.
+ offset (number) - The offset of the first results in the total results. Default 0.
+ limit (number) - The maximum number of results to return at once. Default 100.
+ maxLimit (number) - The maximum allowed limit that can be returned in a single page.
+ totalCount (number) - The total number of objects that matched the query.

## Code (object)
+ currency (string, required) - The three-character ISO-4217 currency.
+ initialValue (number, required) - The value of the code at creation in the smallest currency unit, e.g. cents for USD.
+ programId (string, required) - The id of the Program for which the code will be created from.
+ expires (string, optional) - The code's expiry date and time.  This field will be ommitted if the 
  code was not created with an expiry.  ISO-8601 format.
+ startDate (string, optional) - The code's start date and time.  This field will be ommitted if 
  the code was not created with an start date.  ISO-8601 format.
+ metadata (object) - A collection of key/value pairs of additional information about the code. 
  The `giftbit_*` namespace for keys is reserved. 

## ValueStoreBalance (object)
+ currentValue (number) - The current value of the ValueStore.
+ state (string) - `ACTIVE`, `INACTIVE`, `NOT_STARTED`, `EXPIRED`, `FROZEN`, `CANCELLED`
+ expires (string, optional) - The date when the ValueStore expires in ISO-8601 format.
+ startDate (string, optional) - The date for which the ValueStore will become usable in ISO-8601 format.
+ programId (string) - The Lightrail Program ID.
+ valueStoreId (string) - The Lightrail ValueStore ID.

## ValueStoreDetails (object)
+ valueStoreType (string) - `PRINCIPAL`, `ATTACHED`
+ value (number) 
+ state (string) - `ACTIVE`, `INACTIVE`, `NOT_STARTED`, `EXPIRED`, `FROZEN`, `CANCELLED`
+ expires (string, optional) - The date when the ValueStore expires in ISO-8601 format.
+ startDate (string, optional) - The date for which the ValueStore will become usable in ISO-8601 format.
+ programId (string) - The Lightrail Program ID.
+ valueStoreId (string) - The Lightrail ValueStore ID.
+ restrictions (array[string])

## Balance (object)
+ principal (ValueStoreBalance)
+ attached (array[ValueStoreBalance])
+ currency (string) - The three-character ISO-4217 currency.
+ cardType (string) - `ACCOUNT_CARD`, `GIFT_CARD`.
+ balanceDate (string) - The time the balance was checked.
+ cardId (string) - The Lightrail Card ID.

## Category (object)
+ categoryKey (string) - The key of the category. Examples: "city", "special"
+ categoryValue (string) - The value of the category. Examples: "san francisco", "earlybird"

## Contact (object)
+ contactId (string, required) - The Lightrail Contact ID.
+ userSuppliedId (string, required) - Endpoint-unique idempotency ID provided by the client.
+ dateCreated (string) - Lightrail system time of creation in ISO-8601 format.
+ email (string, optional) - The contact's email.
+ firstName (string, optional) - The contact's first name.
+ lastName (string, optional) - The contact's last name.

## Metadata (object)
+ A collection of key/value pairs of additional information. The `giftbit_*` namespace for keys is reserved.

